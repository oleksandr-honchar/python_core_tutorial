"""
Модуль 2.2: Функції в Python
=============================

Цей модуль показує як створювати та використовувати функції
"""

# ============================================================================
# 1. ЩО ТАКЕ ФУНКЦІЯ?
# ============================================================================

print("=" * 60)
print("1. ОСНОВИ ФУНКЦІЙ")
print("=" * 60)

"""
Функція - це блок коду, який виконує певну задачу.
Функції допомагають:
- Уникати дублювання коду
- Робити код більш читабельним
- Розбивати складні задачі на прості частини
- Повторно використовувати код
"""

# Синтаксис функції:
# def назва_функції(параметри):
#     """Документація (docstring)"""
#     код функції
#     return результат


# ============================================================================
# 2. ПРОСТА ФУНКЦІЯ БЕЗ ПАРАМЕТРІВ
# ============================================================================

print("\n" + "-" * 60)
print("2. ФУНКЦІЯ БЕЗ ПАРАМЕТРІВ")
print("-" * 60)

def say_hello():
    """Функція, яка виводить привітання"""
    print("Привіт!")
    print("Як справи?")

# Виклик функції
say_hello()
print()
say_hello()  # Можемо викликати скільки завгодно разів


def draw_line():
    """Малює декоративну лінію"""
    print("*" * 40)

draw_line()
print("Важливе повідомлення")
draw_line()


# ============================================================================
# 3. ФУНКЦІЇ З ПАРАМЕТРАМИ
# ============================================================================

print("\n" + "=" * 60)
print("3. ФУНКЦІЇ З ПАРАМЕТРАМИ")
print("=" * 60)

def greet(name):
    """
    Вітає користувача за ім'ям
    
    Args:
        name (str): Ім'я користувача
    """
    print(f"Привіт, {name}!")

# Виклик з різними аргументами
greet("Олександр")
greet("Марія")
greet("Іван")


def greet_with_time(name, time_of_day):
    """Вітає з урахуванням часу доби"""
    print(f"Доброго {time_of_day}, {name}!")

greet_with_time("Петро", "ранку")
greet_with_time("Ольга", "вечора")


# ============================================================================
# 4. ФУНКЦІЇ, ЩО ПОВЕРТАЮТЬ ЗНАЧЕННЯ
# ============================================================================

print("\n" + "=" * 60)
print("4. ПОВЕРНЕННЯ ЗНАЧЕНЬ (return)")
print("=" * 60)

def add_numbers(a, b):
    """
    Додає два числа
    
    Args:
        a (int/float): Перше число
        b (int/float): Друге число
    
    Returns:
        int/float: Сума двох чисел
    """
    result = a + b
    return result

# Використання результату функції
sum1 = add_numbers(5, 3)
print(f"5 + 3 = {sum1}")

sum2 = add_numbers(10, 20)
print(f"10 + 20 = {sum2}")

# Можна використовувати результат у виразах
total = add_numbers(5, 10) + add_numbers(2, 3)
print(f"Загальна сума: {total}")


def multiply(x, y):
    """Множить два числа"""
    return x * y

print(f"4 * 7 = {multiply(4, 7)}")


# ============================================================================
# 5. ПАРАМЕТРИ ЗА ЗАМОВЧУВАННЯМ
# ============================================================================

print("\n" + "=" * 60)
print("5. ПАРАМЕТРИ ЗА ЗАМОВЧУВАННЯМ")
print("=" * 60)

def greet_person(name, greeting="Привіт"):
    """
    Вітає особу з можливістю вибору привітання
    
    Args:
        name (str): Ім'я
        greeting (str): Привітання (за замовчуванням "Привіт")
    """
    print(f"{greeting}, {name}!")

# Використання значення за замовчуванням
greet_person("Андрій")

# Вказуємо власне привітання
greet_person("Світлана", "Доброго дня")
greet_person("Максим", "Вітаю")


def power(number, exponent=2):
    """Піднесення до степеня (за замовчуванням - квадрат)"""
    return number ** exponent

print(f"5^2 = {power(5)}")  # За замовчуванням - квадрат
print(f"5^3 = {power(5, 3)}")
print(f"2^10 = {power(2, 10)}")


# ============================================================================
# 6. ПОВЕРНЕННЯ ДЕКІЛЬКОХ ЗНАЧЕНЬ
# ============================================================================

print("\n" + "=" * 60)
print("6. ПОВЕРНЕННЯ ДЕКІЛЬКОХ ЗНАЧЕНЬ")
print("=" * 60)

def divide_with_remainder(dividend, divisor):
    """
    Ділить з остачею
    
    Args:
        dividend: Ділене
        divisor: Дільник
    
    Returns:
        tuple: (частка, остача)
    """
    quotient = dividend // divisor  # Цілочисельне ділення
    remainder = dividend % divisor   # Остача
    return quotient, remainder

# Отримуємо обидва результати
result, rest = divide_with_remainder(17, 5)
print(f"17 ÷ 5 = {result} (остача {rest})")

# Або отримуємо як кортеж
result_tuple = divide_with_remainder(23, 7)
print(f"23 ÷ 7 = {result_tuple}")


def get_person_info():
    """Повертає інформацію про особу"""
    return "Іван", 30, "Київ"

name, age, city = get_person_info()
print(f"Ім'я: {name}, Вік: {age}, Місто: {city}")


# ============================================================================
# 7. ОБЛАСТЬ ВИДИМОСТІ ЗМІННИХ (SCOPE)
# ============================================================================

print("\n" + "=" * 60)
print("7. ОБЛАСТЬ ВИДИМОСТІ ЗМІННИХ")
print("=" * 60)

# Глобальна змінна
global_var = "Я глобальна змінна"

def test_scope():
    # Локальна змінна
    local_var = "Я локальна змінна"
    print(f"Всередині функції: {global_var}")
    print(f"Всередині функції: {local_var}")

test_scope()

print(f"Поза функцією: {global_var}")
# print(f"Поза функцією: {local_var}")  # ❌ Помилка! local_var не існує тут


def increment_counter():
    """Демонстрація локальної змінної"""
    counter = 0
    counter += 1
    return counter

print(f"Лічильник: {increment_counter()}")  # Завжди 1
print(f"Лічильник: {increment_counter()}")  # Знову 1 (нова змінна кожен раз)


# ============================================================================
# 8. DOCSTRING - ДОКУМЕНТУВАННЯ ФУНКЦІЙ
# ============================================================================

print("\n" + "=" * 60)
print("8. ДОКУМЕНТУВАННЯ ФУНКЦІЙ")
print("=" * 60)

def calculate_area(width, height):
    """
    Обчислює площу прямокутника.
    
    Ця функція приймає ширину та висоту прямокутника
    і повертає його площу.
    
    Args:
        width (float): Ширина прямокутника
        height (float): Висота прямокутника
    
    Returns:
        float: Площа прямокутника
    
    Examples:
        >>> calculate_area(5, 10)
        50
        >>> calculate_area(3.5, 2)
        7.0
    """
    return width * height

# Можна подивитися документацію
print(calculate_area.__doc__)

# Або через функцію help
# help(calculate_area)


# ============================================================================
# 9. ПРАКТИЧНІ ПРИКЛАДИ
# ============================================================================

print("\n" + "=" * 60)
print("9. ПРАКТИЧНІ ПРИКЛАДИ")
print("=" * 60)

# Приклад 1: Перевірка парності
def is_even(number):
    """Перевіряє чи число парне"""
    return number % 2 == 0

print(f"4 парне? {is_even(4)}")
print(f"7 парне? {is_even(7)}")


# Приклад 2: Знаходження максимуму
def find_max(a, b, c):
    """Знаходить максимальне з трьох чисел"""
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c

print(f"Максимум з (5, 12, 8): {find_max(5, 12, 8)}")


# Приклад 3: Обчислення факторіалу
def factorial(n):
    """
    Обчислює факторіал числа
    n! = 1 * 2 * 3 * ... * n
    """
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

print(f"5! = {factorial(5)}")
print(f"10! = {factorial(10)}")


# Приклад 4: Перевірка простого числа
def is_prime(n):
    """Перевіряє чи число просте"""
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

print(f"7 просте? {is_prime(7)}")
print(f"10 просте? {is_prime(10)}")


# Приклад 5: Конвертер температури
def celsius_to_fahrenheit(celsius):
    """Переводить Цельсій у Фаренгейт"""
    return (celsius * 9/5) + 32

def fahrenheit_to_celsius(fahrenheit):
    """Переводить Фаренгейт у Цельсій"""
    return (fahrenheit - 32) * 5/9

print(f"25°C = {celsius_to_fahrenheit(25):.1f}°F")
print(f"77°F = {fahrenheit_to_celsius(77):.1f}°C")


# ============================================================================
# 10. ФУНКЦІЇ ЯК ПАРАМЕТРИ (ADVANCED)
# ============================================================================

print("\n" + "=" * 60)
print("10. ФУНКЦІЇ ЯК ПАРАМЕТРИ (просунутий рівень)")
print("=" * 60)

def apply_operation(x, y, operation):
    """
    Застосовує операцію до двох чисел
    
    Args:
        x, y: Числа
        operation: Функція-операція
    """
    return operation(x, y)

# Використання
result1 = apply_operation(10, 5, add_numbers)
print(f"10 + 5 = {result1}")

result2 = apply_operation(10, 5, multiply)
print(f"10 * 5 = {result2}")


# ============================================================================
# ПІДСУМОК
# ============================================================================

print("\n" + "=" * 60)
print("ПІДСУМОК")
print("=" * 60)

summary = """
✅ Функція - блок коду, що виконує певну задачу

✅ Синтаксис:
   def назва_функції(параметри):
       код
       return результат

✅ Параметри:
   - Обов'язкові
   - За замовчуванням
   
✅ return - повертає значення з функції

✅ Можна повертати декілька значень через кому

✅ Docstring - документація функції в потрійних лапках

✅ Область видимості:
   - Локальні змінні (всередині функції)
   - Глобальні змінні (поза функціями)

✅ Переваги функцій:
   - Уникнення дублювання коду
   - Покращення читабельності
   - Легше тестувати
   - Можливість повторного використання
"""

print(summary)


# ============================================================================
# ПРАКТИЧНІ ЗАВДАННЯ ДЛЯ САМОСТІЙНОЇ РОБОТИ
# ============================================================================

print("\n" + "=" * 60)
print("ЗАВДАННЯ ДЛЯ ПРАКТИКИ")
print("=" * 60)

practice_tasks = """
1. Напишіть функцію, яка перевіряє чи число позитивне
   
2. Напишіть функцію для обчислення площі кола (π * r²)
   
3. Напишіть функцію, яка повертає більше з двох чисел
   
4. Напишіть функцію, яка переводить години в секунди
   
5. Напишіть функцію, яка рахує суму цифр числа
   (наприклад: 123 -> 1 + 2 + 3 = 6)
"""

print(practice_tasks)

print("\n✨ Модуль завершено! Практикуйтесь з функціями! ✨\n")


# ============================================================================
# ШАБЛОНИ ДЛЯ ПРАКТИКИ (розкоментуйте та доповніть)
# ============================================================================

"""
# Завдання 1
def is_positive(number):
    # Ваш код тут
    pass

# Завдання 2
def circle_area(radius):
    # Ваш код тут
    # Підказка: використайте 3.14159 або math.pi
    pass

# Завдання 3
def max_of_two(a, b):
    # Ваш код тут
    pass

# Завдання 4
def hours_to_seconds(hours):
    # Ваш код тут
    pass

# Завдання 5
def sum_of_digits(number):
    # Ваш код тут
    # Підказка: перетворіть число в рядок, потім ітеруйте по цифрах
    pass
"""
