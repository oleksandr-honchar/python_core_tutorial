"""
–ú–æ–¥—É–ª—å 2.4: Debugging (–ù–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è) –≤ VSCode
==============================================

–¶–µ–π –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—É—î —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ debugger –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
"""

# ============================================================================
# –©–û –¢–ê–ö–ï DEBUGGING?
# ============================================================================

"""
Debugging (–Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è) - –ø—Ä–æ—Ü–µ—Å –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —É –∫–æ–¥—ñ.

Debugger - —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î:
- –ó—É–ø–∏–Ω—è—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ –ø–µ–≤–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö
- –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
- –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–¥ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º
- –†–æ–∑—É–º—ñ—Ç–∏ —è–∫ –ø—Ä–∞—Ü—é—î –ø—Ä–æ–≥—Ä–∞–º–∞

–í–ê–ñ–õ–ò–í–Ü–°–¢–¨:
‚úÖ –®–≤–∏–¥—à–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏
‚úÖ –†–æ–∑—É–º—ñ—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
‚úÖ –í—á–∏—Ç–∏—Å—è –Ω–∞ –ø–æ–º–∏–ª–∫–∞—Ö
‚úÖ –ë–∞—á–∏—Ç–∏ –∑–º—ñ–Ω–∏ –∑–º—ñ–Ω–Ω–∏—Ö —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""

print("=" * 60)
print("–ü–†–ò–ö–õ–ê–î–ò –î–õ–Ø DEBUGGING")
print("=" * 60)


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 1: –ü–†–û–°–¢–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø DEBUGGING
# ============================================================================

def calculate_sum(numbers):
    """
    –û–±—á–∏—Å–ª—é—î —Å—É–º—É —á–∏—Å–µ–ª —É —Å–ø–∏—Å–∫—É
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. –ü–æ—Å—Ç–∞–≤—Ç–µ breakpoint –Ω–∞ —Ä—è–¥–∫—É "total = 0"
    2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å debugger (F5)
    3. –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è total —É –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
    """
    total = 0  # üëà BREAKPOINT –¢–£–¢
    
    for number in numbers:
        total = total + number  # –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è total
        print(f"–ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞: {total}")
    
    return total


# –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
result = calculate_sum([5, 10, 15, 20])
print(f"–ö—ñ–Ω—Ü–µ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 2: –ü–û–®–£–ö –õ–Ü–¢–ï–†–ò –ó DEBUGGING
# ============================================================================

def find_letter_positions(text, letter):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –ª—ñ—Ç–µ—Ä–∏ —É —Ç–µ–∫—Å—Ç—ñ
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. Breakpoint –Ω–∞ "positions = []"
    2. Step Over (F10) —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
    3. –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è i —Ç–∞ positions
    4. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –∫–æ–ª–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è if
    """
    positions = []  # üëà BREAKPOINT –¢–£–¢
    
    for i in range(len(text)):
        char = text[i]
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ–∑–∏—Ü—ñ—é {i}: —Å–∏–º–≤–æ–ª '{char}'")
        
        if char.lower() == letter.lower():
            positions.append(i)
            print(f"  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞—é {i} –¥–æ —Å–ø–∏—Å–∫—É")
    
    return positions


# –í–∏–∫–ª–∏–∫
text = "Hello World"
letter = "o"
result = find_letter_positions(text, letter)
print(f"\n–õ—ñ—Ç–µ—Ä–∞ '{letter}' –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—è—Ö: {result}")


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 3: –ü–õ–û–©–ê –¢–†–ò–ö–£–¢–ù–ò–ö–ê
# ============================================================================

def calculate_triangle_area(base, height):
    """
    –û–±—á–∏—Å–ª—é—î –ø–ª–æ—â—É —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é: (–æ—Å–Ω–æ–≤–∞ * –≤–∏—Å–æ—Ç–∞) / 2
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. Breakpoint –Ω–∞ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
    2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ base —Ç–∞ height
    3. Step Over —á–µ—Ä–µ–∑ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
    4. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –¥—ñ–ª–µ–Ω–Ω—è
    """
    print(f"–†–æ–∑—Ä–∞—Ö–æ–≤—É—é –ø–ª–æ—â—É —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞")
    print(f"–û—Å–Ω–æ–≤–∞: {base}")
    print(f"–í–∏—Å–æ—Ç–∞: {height}")
    
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è
    product = base * height  # –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    area = product / 2       # –Ü —Ü–µ
    
    print(f"–ü–ª–æ—â–∞: {area}")
    return area


# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
print("\n" + "=" * 60)
print("–¢–ï–°–¢ 1:")
area1 = calculate_triangle_area(10, 5)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {area1}\n")

print("–¢–ï–°–¢ 2:")
area2 = calculate_triangle_area(7.5, 4)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {area2}\n")


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 4: –§–£–ù–ö–¶–Ü–Ø –ó –ü–û–ú–ò–õ–ö–û–Æ (–¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ debugging)
# ============================================================================

def calculate_average_buggy(numbers):
    """
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –ë–ê“ê!
    
    –ó–ê–í–î–ê–ù–ù–Ø:
    1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ debugger —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ–º–∏–ª–∫—É
    2. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
    3. –ó—Ä–æ–∑—É–º—ñ–π—Ç–µ —â–æ –π–¥–µ –Ω–µ —Ç–∞–∫
    """
    total = 0
    count = 0
    
    for num in numbers:
        total += num
        # count += 1  # üëà –ë–ê“ê: —Ü—è –ª—ñ–Ω—ñ—è –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞!
    
    average = total / count  # –©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è —è–∫—â–æ count = 0?
    return average


# –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
# try:
#     result = calculate_average_buggy([5, 10, 15])
#     print(f"–°–µ—Ä–µ–¥–Ω—î: {result}")
# except ZeroDivisionError as e:
#     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
#     print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ debugger —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É!")


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 5: –°–ö–õ–ê–î–ù–Ü–®–ê –õ–û–ì–Ü–ö–ê
# ============================================================================

def find_max_and_min(numbers):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. Breakpoint –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
    2. –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—é—Ç—å—Å—è max_num —Ç–∞ min_num
    3. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —É–º–æ–≤–∏ if
    """
    if len(numbers) == 0:
        return None, None
    
    max_num = numbers[0]  # üëà BREAKPOINT –¢–£–¢
    min_num = numbers[0]
    
    for num in numbers[1:]:  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –¥—Ä—É–≥–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é —á–∏—Å–ª–æ: {num}")
        
        if num > max_num:
            print(f"  {num} > {max_num} - –æ–Ω–æ–≤–ª—é—é –º–∞–∫—Å–∏–º—É–º")
            max_num = num
        
        if num < min_num:
            print(f"  {num} < {min_num} - –æ–Ω–æ–≤–ª—é—é –º—ñ–Ω—ñ–º—É–º")
            min_num = num
    
    return max_num, min_num


# –¢–µ—Å—Ç
numbers = [15, 3, 42, 8, 23, 4, 16]
max_val, min_val = find_max_and_min(numbers)
print(f"\n–ú–∞–∫—Å–∏–º—É–º: {max_val}")
print(f"–ú—ñ–Ω—ñ–º—É–º: {min_val}")


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 6: –£–ú–û–í–ù–ê –õ–û–ì–Ü–ö–ê
# ============================================================================

def grade_calculator(score):
    """
    –í–∏–∑–Ω–∞—á–∞—î –æ—Ü—ñ–Ω–∫—É –∑–∞ –±–∞–ª–∞–º–∏
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. –î–æ–¥–∞–π—Ç–µ breakpoint –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    2. –í–∏–ø—Ä–æ–±—É–π—Ç–µ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ score
    3. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è —è–∫–∞ —É–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
    """
    print(f"–û—Ü—ñ–Ω—é—é –±–∞–ª: {score}")
    
    if score >= 90:  # üëà BREAKPOINT - –¥–∏–≤—ñ—Ç—å—Å—è —É–º–æ–≤–∏
        grade = "–í—ñ–¥–º—ñ–Ω–Ω–æ"
    elif score >= 75:
        grade = "–î–æ–±—Ä–µ"
    elif score >= 60:
        grade = "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
    else:
        grade = "–ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
    
    print(f"–û—Ü—ñ–Ω–∫–∞: {grade}")
    return grade


# –¢–µ—Å—Ç–∏
test_scores = [95, 80, 65, 45]
for score in test_scores:
    grade_calculator(score)
    print()


# ============================================================================
# –ü–†–ò–ö–õ–ê–î 7: –†–ï–ö–£–†–°–Ü–Ø (ADVANCED)
# ============================================================================

def factorial(n):
    """
    –û–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    
    –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø DEBUGGING:
    1. Breakpoint –Ω–∞ –ø–µ—Ä—à—ñ–π –ª—ñ–Ω—ñ—ó
    2. Step Into (F11) - —É–≤—ñ–π–¥—ñ—Ç—å —É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫
    3. –î–∏–≤—ñ—Ç—å—Å—è Call Stack (—Å—Ç–µ–∫ –≤–∏–∫–ª–∏–∫—ñ–≤)
    4. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É —è–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—å—Å—è —Ä–µ–∫—É—Ä—Å—ñ—è
    """
    print(f"factorial({n}) –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    
    if n <= 1:  # üëà BREAKPOINT –¥–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó
        print(f"  –ë–∞–∑–∞ —Ä–µ–∫—É—Ä—Å—ñ—ó: –ø–æ–≤–µ—Ä—Ç–∞—é 1")
        return 1
    else:
        result = n * factorial(n - 1)
        print(f"  factorial({n}) = {n} * factorial({n-1}) = {result}")
        return result


# –¢–µ—Å—Ç —Ä–µ–∫—É—Ä—Å—ñ—ó
print("\n" + "=" * 60)
print("–†–ï–ö–£–†–°–Ü–Ø: –§–ê–ö–¢–û–†–Ü–ê–õ")
print("=" * 60)
result = factorial(5)
print(f"\n5! = {result}")


# ============================================================================
# –ö–û–†–ò–°–ù–Ü –¢–ï–•–ù–Ü–ö–ò DEBUGGING
# ============================================================================

print("\n" + "=" * 60)
print("–¢–ï–•–ù–Ü–ö–ò DEBUGGING")
print("=" * 60)

def debugging_techniques_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ–∫"""
    
    # 1. Print statements (–ø—Ä–æ—Å—Ç–∏–π –∞–ª–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±)
    print("üîç DEBUG: –ü–æ—á–∞—Ç–æ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó")
    
    x = 10
    y = 20
    print(f"üîç DEBUG: x={x}, y={y}")
    
    result = x + y
    print(f"üîç DEBUG: result={result}")
    
    # 2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è assert –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–ø—É—â–µ–Ω—å
    assert result == 30, "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—î –±—É—Ç–∏ 30"
    
    # 3. Try-except –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
    try:
        division = 100 / 0
    except ZeroDivisionError as e:
        print(f"üîç DEBUG: –°–ø—ñ–π–º–∞–Ω–æ –ø–æ–º–∏–ª–∫—É: {e}")
    
    return result


debugging_techniques_demo()


# ============================================================================
# –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø DEBUGGER
# ============================================================================

debug_instructions = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø: –Ø–ö –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò DEBUGGER         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

1Ô∏è‚É£ –î–û–î–ê–¢–ò BREAKPOINT (—Ç–æ—á–∫—É –∑—É–ø–∏–Ω–∫–∏):
   - –ö–ª—ñ–∫–Ω—ñ—Ç—å –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–∫–∞
   - –ê–±–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ä—è–¥–æ–∫ —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å F9
   - –ß–µ—Ä–≤–æ–Ω–∞ –∫—Ä–∞–ø–∫–∞ = –∞–∫—Ç–∏–≤–Ω–∏–π breakpoint

2Ô∏è‚É£ –ó–ê–ü–£–°–¢–ò–¢–ò DEBUGGER:
   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å F5
   - –ê–±–æ –∫–ª—ñ–∫–Ω—ñ—Ç—å Run ‚Üí Start Debugging
   - –í–∏–±–µ—Ä—ñ—Ç—å "Python File"

3Ô∏è‚É£ –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø (Debug Toolbar):
   ‚ñ∂Ô∏è  Continue (F5)           - –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ breakpoint
   ‚è∏Ô∏è  Pause                   - –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
   üîÑ  Step Over (F10)         - –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ä—è–¥–æ–∫ (–Ω–µ –≤—Ö–æ–¥—è—á–∏ –≤ —Ñ—É–Ω–∫—Ü—ñ—ó)
   ‚¨áÔ∏è  Step Into (F11)         - —É–≤—ñ–π—Ç–∏ —É —Ñ—É–Ω–∫—Ü—ñ—é
   ‚¨ÜÔ∏è  Step Out (Shift+F11)    - –≤–∏–π—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
   üîÑ  Restart (Ctrl+Shift+F5) - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏
   ‚èπÔ∏è  Stop (Shift+F5)         - –∑—É–ø–∏–Ω–∏—Ç–∏

4Ô∏è‚É£ –©–û –î–ò–í–ò–¢–ò–°–Ø:

   üìä VARIABLES (–ó–º—ñ–Ω–Ω—ñ):
      - –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Ç–∞ —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è
      - Locals: –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
      - Globals: –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
   
   üìû CALL STACK (–°—Ç–µ–∫ –≤–∏–∫–ª–∏–∫—ñ–≤):
      - –ü–æ–∫–∞–∑—É—î –ª–∞–Ω—Ü—é–≥ –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π
      - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó
   
   üëÅÔ∏è WATCH (–°–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è):
      - –î–æ–¥–∞–π—Ç–µ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
      - –ù–∞–ø—Ä–∏–∫–ª–∞–¥: len(text), x + y
   
   üî¥ BREAKPOINTS:
      - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö breakpoints
      - –ú–æ–∂–Ω–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∫–Ω—É—Ç–∏

5Ô∏è‚É£ –ü–û–†–ê–î–ò:

   ‚úÖ –ü–æ—á–∏–Ω–∞–π—Ç–µ –∑ –ø—Ä–æ—Å—Ç–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
   ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Step Over (F10) –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–∫—Ä–æ–∫–æ–≤–æ
   ‚úÖ –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ –∑–º—ñ–Ω–Ω–∏—Ö
   ‚úÖ Step Into (F11) –¥–ª—è –≤—Ö–æ–¥—É –≤ —Ñ—É–Ω–∫—Ü—ñ—ó
   ‚úÖ –î–æ–¥–∞–≤–∞–π—Ç–µ –≤–∏—Ä–∞–∑–∏ –≤ Watch –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
   ‚úÖ –ü–æ—Ä—ñ–≤–Ω—é–π—Ç–µ –æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ç–∞ —Ä–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

6Ô∏è‚É£ –¢–ò–ü–û–í–Ü –ó–ê–í–î–ê–ù–ù–Ø:

   üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–º–∏–ª–∫—É:
      1. –î–æ–¥–∞–π—Ç–µ breakpoint –¥–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –ø—Ä–æ–±–ª–µ–º–∞
      2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å debugger
      3. –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
      4. –ö—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º –∑–Ω–∞–π–¥—ñ—Ç—å –¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º
   
   üîç –ó—Ä–æ–∑—É–º—ñ—Ç–∏ –ª–æ–≥—ñ–∫—É:
      1. Breakpoint –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
      2. Step Over (F10) —á–µ—Ä–µ–∑ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
      3. –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ
      4. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —É–º–æ–≤–∏ if/else

7Ô∏è‚É£ –ü–†–ê–ö–¢–ò–ö–ê:

   –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É —É —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ:
   ‚úì –î–æ–¥–∞–π—Ç–µ breakpoint –¥–µ –≤–∫–∞–∑–∞–Ω–æ üëà
   ‚úì –ó–∞–ø—É—Å—Ç—ñ—Ç—å debugger
   ‚úì –ü—Ä–æ–π–¥—ñ—Ç—å –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º
   ‚úì –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –∑–º—ñ–Ω–Ω—ñ
   ‚úì –ó—Ä–æ–∑—É–º—ñ–π—Ç–µ –ª–æ–≥—ñ–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
"""

print(debug_instructions)


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø
# ============================================================================

print("\n" + "=" * 60)
print("–ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø –ü–†–ê–ö–¢–ò–ö–ò DEBUGGING")
print("=" * 60)

practice_tasks = """
1Ô∏è‚É£ –ë–ê–ó–û–í–ò–ô –†–Ü–í–ï–ù–¨:
   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å calculate_sum([1, 2, 3, 4, 5]) –∑ debugger
   - –î–∏–≤—ñ—Ç—å—Å—è —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è total –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
   - –ü–µ—Ä–µ–¥–±–∞—á—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ Step Over

2Ô∏è‚É£ –°–ï–†–ï–î–ù–Ü–ô –†–Ü–í–ï–ù–¨:
   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å find_letter_positions("Programming", "r")
   - –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ i, char, positions
   - –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –∫–æ–ª–∏ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î if

3Ô∏è‚É£ –ü–û–®–£–ö –ü–û–ú–ò–õ–ö–ò:
   - –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ calculate_average_buggy
   - –ó–Ω–∞–π–¥—ñ—Ç—å –ø–æ–º–∏–ª–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é debugger
   - –í–∏–ø—Ä–∞–≤—Ç–µ –∫–æ–¥

4Ô∏è‚É£ –°–ö–õ–ê–î–ù–ê –õ–û–ì–Ü–ö–ê:
   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å find_max_and_min –∑ debugger
   - –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ max_num —Ç–∞ min_num
   - –ó—Ä–æ–∑—É–º—ñ–π—Ç–µ –∫–æ–ª–∏ –≤–æ–Ω–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è

5Ô∏è‚É£ –†–ï–ö–£–†–°–Ü–Ø (ADVANCED):
   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å factorial(4) –∑ debugger
   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ Step Into (F11)
   - –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ Call Stack
   - –ó—Ä–æ–∑—É–º—ñ–π—Ç–µ —è–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç—å—Å—è —Ä–µ–∫—É—Ä—Å—ñ—è

üí° –î–û–î–ê–¢–ö–û–í–ï –ó–ê–í–î–ê–ù–ù–Ø:
   –ù–∞–ø–∏—à—ñ—Ç—å –≤–ª–∞—Å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–º–∏–ª–∫–æ—é —Ç–∞ –∑–Ω–∞–π–¥—ñ—Ç—å —ó—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é debugger!
"""

print(practice_tasks)


# ============================================================================
# –ü–Ü–î–°–£–ú–û–ö
# ============================================================================

print("\n" + "=" * 60)
print("–ü–Ü–î–°–£–ú–û–ö")
print("=" * 60)

summary = """
‚úÖ Debugger - –ø–æ—Ç—É–∂–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–¥—É

‚úÖ –û—Å–Ω–æ–≤–Ω—ñ –¥—ñ—ó:
   - F9: –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ breakpoint
   - F5: –∑–∞–ø—É—Å—Ç–∏—Ç–∏ debugger / continue
   - F10: Step Over (–Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫)
   - F11: Step Into (—É–≤—ñ–π—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü—ñ—é)
   - Shift+F11: Step Out (–≤–∏–π—Ç–∏ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó)

‚úÖ –©–æ –¥–∏–≤–∏—Ç–∏—Å—è:
   - Variables: –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
   - Call Stack: –ª–∞–Ω—Ü—é–≥ –≤–∏–∫–ª–∏–∫—ñ–≤
   - Watch: –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ –≤–∏—Ä–∞–∑–∏

‚úÖ –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
   - –®—É–∫–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É
   - –ù–µ —Ä–æ–∑—É–º—ñ—î—Ç–µ –ª–æ–≥—ñ–∫—É
   - –í—á–∏—Ç–µ –Ω–æ–≤–∏–π –∫–æ–¥
   - –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç–µ –≥—ñ–ø–æ—Ç–µ–∑—É

‚úÖ –ü–µ—Ä–µ–≤–∞–≥–∏ debugger vs print():
   - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
   - –ë–∞—á–∏—Ç–µ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ
   - –ù–µ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞–≤–∞—Ç–∏/–≤–∏–¥–∞–ª—è—Ç–∏ print
   - –ö—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

üéØ –ì–û–õ–û–í–ù–ê –ü–û–†–ê–î–ê:
   –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å! –ß–∏–º –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å debugger,
   —Ç–∏–º —à–≤–∏–¥—à–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–º–∏–ª–∫–∏!
"""

print(summary)

print("\n‚ú® –¢–µ–ø–µ—Ä –≤–∏ –∑–Ω–∞—î—Ç–µ —è–∫ –¥–µ–±–∞–∂–∏—Ç–∏ –∫–æ–¥! –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å! ‚ú®\n")
