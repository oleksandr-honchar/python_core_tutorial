# %% [markdown]
# # üêç Python Fundamentals: Input/Output —Ç–∞ Functions
# 
# ## üìö –ó–º—ñ—Å—Ç –º–æ–¥—É–ª—è
# 
# ### –ß–∞—Å—Ç–∏–Ω–∞ 1: Input —Ç–∞ Output
# 1. –§—É–Ω–∫—Ü—ñ—è `print()` - –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
# 2. –§—É–Ω–∫—Ü—ñ—è `input()` - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# 3. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
# 4. F-strings —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
# 5. **–†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å input** (–ø—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
# 6. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
# 
# ### –ß–∞—Å—Ç–∏–Ω–∞ 2: Functions
# 1. –û—Å–Ω–æ–≤–∏ —Ñ—É–Ω–∫—Ü—ñ–π
# 2. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
# 3. –û–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö
# 4. –õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó
# 5. –í–±—É–¥–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó Python
# 6. –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±—ñ–±–ª—ñ–æ—Ç–µ–∫
# 
# ---

# %% [markdown]
# # üì§ –ß–∞—Å—Ç–∏–Ω–∞ 1: Input —Ç–∞ Output –≤ Python
# 
# ## 1.1 –§—É–Ω–∫—Ü—ñ—è `print()` - –û—Å–Ω–æ–≤–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
# 
# –§—É–Ω–∫—Ü—ñ—è `print()` - —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —É Python. –í–æ–Ω–∞ –º–∞—î –±–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—ñ —Ä–æ–±–ª—è—Ç—å —ó—ó –¥—É–∂–µ –≥–Ω—É—á–∫–æ—é.
# 
# ### –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
# - `sep` - —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø—Ä–æ–±—ñ–ª)
# - `end` - —Å–∏–º–≤–æ–ª –≤ –∫—ñ–Ω—Ü—ñ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - `\n`)
# - `file` - –∫—É–¥–∏ –≤–∏–≤–æ–¥–∏—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∫–æ–Ω—Å–æ–ª—å)
# - `flush` - —á–∏ –æ—á–∏—â—É–≤–∞—Ç–∏ –±—É—Ñ–µ—Ä –Ω–µ–≥–∞–π–Ω–æ

# %%
# –ë–∞–∑–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è print()
print("=" * 80)
print("1. –û–°–ù–û–í–ò print()")
print("=" * 80)

# –ü—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
print("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
print(42)
print(3.14159)
print(True)
print([1, 2, 3, 4, 5])

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∑–Ω–∞—á–µ–Ω—å
print("–Ü–º'—è:", "–Ü–≤–∞–Ω", "–í—ñ–∫:", 25, "–ú—ñ—Å—Ç–æ:", "–ö–∏—ó–≤")

# %% [markdown]
# ### –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ `sep` —Ç–∞ `end`
# 
# –ü–∞—Ä–∞–º–µ—Ç—Ä `sep` –¥–æ–∑–≤–æ–ª—è—î –≤–∫–∞–∑–∞—Ç–∏, —è–∫ —Ä–æ–∑–¥—ñ–ª—è—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—ñ.  
# –ü–∞—Ä–∞–º–µ—Ç—Ä `end` –≤–∏–∑–Ω–∞—á–∞—î, —â–æ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫).

# %%
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è sep (separator)
print("Python", "Java", "JavaScript", "C++", sep=" | ")
print("2025", "01", "15", sep="-")
print(1, 2, 3, 4, 5, sep=" -> ")

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è end
print("–¶–µ–π —Ä—è–¥–æ–∫ ", end="")
print("–ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –Ω–∞ —Ç—ñ–π —Å–∞–º—ñ–π –ª—ñ–Ω—ñ—ó!")

# –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è sep —Ç–∞ end
print("–ü–µ—Ä—à–∏–π", "–î—Ä—É–≥–∏–π", "–¢—Ä–µ—Ç—ñ–π", sep=", ", end=" -> ")
print("–ß–µ—Ç–≤–µ—Ä—Ç–∏–π")

# %% [markdown]
# ### –í–∏–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–∞–π–ª
# 
# `print()` –º–æ–∂–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –∞–ª–µ –π —É —Ñ–∞–π–ª–∏. –¶–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.

# %%
# –í–∏–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–∞–π–ª
with open('/home/claude/output_example.txt', 'w', encoding='utf-8') as f:
    print("–¶–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–∞–π–ª", file=f)
    print("–ú–æ–∂–Ω–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤", file=f)
    print("–î–∞—Ç–∞:", "2025-01-15", file=f)

# –ß–∏—Ç–∞—î–º–æ, —â–æ –∑–∞–ø–∏—Å–∞–ª–∏
with open('/home/claude/output_example.txt', 'r', encoding='utf-8') as f:
    content = f.read()
    print("\n–í–º—ñ—Å—Ç —Ñ–∞–π–ª—É:")
    print(content)

# %% [markdown]
# ## 1.2 –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
# 
# Python –Ω–∞–¥–∞—î –∫—ñ–ª—å–∫–∞ —Å–ø–æ—Å–æ–±—ñ–≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤. –†–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—Ö –≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ —Å—É—á–∞—Å–Ω–∏—Ö.

# %%
name = "–û–ª–µ–∫—Å–∞–Ω–¥—Ä"
age = 28
height = 1.82
balance = 1234.567

print("\n" + "=" * 80)
print("–°–ü–û–°–û–ë–ò –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –†–Ø–î–ö–Ü–í")
print("=" * 80)

# 1. –°—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–± - –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—è (‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø)
print("–°—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–±: –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ " + name + ", –º–µ–Ω—ñ " + str(age) + " —Ä–æ–∫—ñ–≤")

# 2. –ú–µ—Ç–æ–¥ format() (‚úì –≥–∞—Ä–Ω–∏–π, –∞–ª–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π)
print("–ú–µ—Ç–æ–¥ format(): –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ {}, –º–µ–Ω—ñ {} —Ä–æ–∫—ñ–≤".format(name, age))
print("–ó —ñ–Ω–¥–µ–∫—Å–∞–º–∏: {0} –º–∞—î {1} —Ä–æ–∫—ñ–≤. {0} –∂–∏–≤–µ –≤ –£–∫—Ä–∞—ó–Ω—ñ".format(name, age))
print("–ó —ñ–º–µ–Ω–∞–º–∏: {n} –º–∞—î {a} —Ä–æ–∫—ñ–≤".format(n=name, a=age))

# 3. F-strings (‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø - Python 3.6+)
print(f"F-string: –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ {name}, –º–µ–Ω—ñ {age} —Ä–æ–∫—ñ–≤")

# %% [markdown]
# ### F-strings - –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —Ç–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å
# 
# F-strings (formatted string literals) - —Ü–µ –Ω–∞–π—Å—É—á–∞—Å–Ω—ñ—à–∏–π —Ç–∞ –Ω–∞–π–∑—Ä—É—á–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ Python. –í–æ–Ω–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å:
# - –í–∏—Ä–∞–∑–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—É–∂–æ–∫
# - –í–∏–∫–ª–∏–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π
# - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª
# - –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É

# %%
# –í–∏—Ä–∞–∑–∏ —É f-strings
print(f"\n–í–∏—Ä–∞–∑–∏ —É f-strings:")
print(f"–ß–µ—Ä–µ–∑ 5 —Ä–æ–∫—ñ–≤ –º–µ–Ω—ñ –±—É–¥–µ {age + 5} —Ä–æ–∫—ñ–≤")
print(f"–ü–æ–¥–≤–æ—î–Ω–∏–π –≤—ñ–∫: {age * 2}")
print(f"–ó—Ä—ñ—Å—Ç —É —Å–º: {height * 100}")

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª
print(f"\n–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª:")
print(f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} –≥—Ä–Ω")  # 2 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏
print(f"–ë–∞–ª–∞–Ω—Å: {balance:,.2f} –≥—Ä–Ω")  # –ó —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–µ–º —Ç–∏—Å—è—á
print(f"–ë–∞–ª–∞–Ω—Å: {balance:>15.2f} –≥—Ä–Ω")  # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—Ä—É—á (15 —Å–∏–º–≤–æ–ª—ñ–≤)
print(f"–ë–∞–ª–∞–Ω—Å: {balance:<15.2f} –≥—Ä–Ω")  # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ª—ñ–≤–æ—Ä—É—á
print(f"–ë–∞–ª–∞–Ω—Å: {balance:^15.2f} –≥—Ä–Ω")  # –ü–æ —Ü–µ–Ω—Ç—Ä—É

# –í—ñ–¥—Å–æ—Ç–∫–∏ —Ç–∞ –Ω–∞—É–∫–æ–≤–∞ –Ω–æ—Ç–∞—Ü—ñ—è
accuracy = 0.95847
print(f"\n–¢–æ—á–Ω—ñ—Å—Ç—å: {accuracy:.2%}")  # –Ø–∫ –≤—ñ–¥—Å–æ—Ç–æ–∫
big_number = 1234567890
print(f"–í–µ–ª–∏–∫–µ —á–∏—Å–ª–æ: {big_number:e}")  # –ù–∞—É–∫–æ–≤–∞ –Ω–æ—Ç–∞—Ü—ñ—è

# %% [markdown]
# ### –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
# 
# –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω—å –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É `math`.

# %%
import math

print("\n" + "=" * 80)
print("–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ú–û–î–£–õ–Ø math")
print("=" * 80)

# ‚ùå –ù–ï –†–û–ë–Ü–¢–¨ –¢–ê–ö:
pi_bad = 3.14
print(f"–ü–æ–≥–∞–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞: œÄ ‚âà {pi_bad}")

# ‚úÖ –†–û–ë–Ü–¢–¨ –¢–ê–ö:
print(f"–ì–∞—Ä–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞: œÄ = {math.pi}")
print(f"–ß–∏—Å–ª–æ e: {math.e}")
print(f"œÑ (—Ç–∞—É): {math.tau}")

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
print(f"\nœÄ –∑ —Ä—ñ–∑–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é:")
print(f"2 –∑–Ω–∞–∫–∏: {math.pi:.2f}")
print(f"5 –∑–Ω–∞–∫—ñ–≤: {math.pi:.5f}")
print(f"10 –∑–Ω–∞–∫—ñ–≤: {math.pi:.10f}")

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
radius = 5
area = math.pi * radius ** 2
circumference = 2 * math.pi * radius

print(f"\n–ö–æ–ª–æ –∑ —Ä–∞–¥—ñ—É—Å–æ–º {radius}:")
print(f"–ü–ª–æ—â–∞: {area:.2f}")
print(f"–î–æ–≤–∂–∏–Ω–∞ –∫–æ–ª–∞: {circumference:.2f}")

# %% [markdown]
# ## 1.3 –§—É–Ω–∫—Ü—ñ—è `input()` - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# 
# `input()` –∑—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ —á–µ–∫–∞—î –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î **—Ä—è–¥–æ–∫ (string)**!
# 
# ### ‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ —Ä–æ–∑—É–º—ñ—Ç–∏:
# - –£ —Ä–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö `input()` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä—ñ–¥–∫–æ
# - –î–∞–Ω—ñ –∑–∞–∑–≤–∏—á–∞–π –±–µ—Ä—É—Ç—å—Å—è –∑ —Ñ–∞–π–ª—ñ–≤, –±–∞–∑ –¥–∞–Ω–∏—Ö, API –∞–±–æ –≤–µ–±-—Ñ–æ—Ä–º
# - `input()` –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ—Å—Ç–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤

# %%
# –ë–∞–∑–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è input() (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
# name = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è: ")
# print(f"–ü—Ä–∏–≤—ñ—Ç, {name}!")

# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –∑–º—ñ–Ω–Ω—É
name = "–ê–Ω–¥—Ä—ñ–π"  # –∑–∞–º—ñ—Å—Ç—å input()
print(f"–ü—Ä–∏–≤—ñ—Ç, {name}!")

# –í–∞–∂–ª–∏–≤–æ! input() –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫
# age_str = input("–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤? ")
age_str = "25"  # –∑–∞–º—ñ—Å—Ç—å input()
print(f"–í–∏ –≤–≤–µ–ª–∏: '{age_str}' (—Ç–∏–ø: {type(age_str).__name__})")

# %% [markdown]
# ## 1.4 –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (Type Casting)
# 
# –û—Å–∫—ñ–ª—å–∫–∏ `input()` –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫, —á–∞—Å—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –≤ —ñ–Ω—à—ñ —Ç–∏–ø–∏:
# - `int()` - —Ü—ñ–ª–µ —á–∏—Å–ª–æ
# - `float()` - –¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ
# - `str()` - —Ä—è–¥–æ–∫
# - `bool()` - –ª–æ–≥—ñ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
# - `list()`, `tuple()`, `set()` - –∫–æ–ª–µ–∫—Ü—ñ—ó

# %%
print("\n" + "=" * 80)
print("–ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø –¢–ò–ü–Ü–í –î–ê–ù–ò–•")
print("=" * 80)

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —É —á–∏—Å–ª–∞
age_str = "28"
age_int = int(age_str)
print(f"–†—è–¥–æ–∫ '{age_str}' -> –ß–∏—Å–ª–æ {age_int}")
print(f"–¢–∏–ø–∏: {type(age_str).__name__} -> {type(age_int).__name__}")

price_str = "19.99"
price_float = float(price_str)
print(f"\n–†—è–¥–æ–∫ '{price_str}' -> Float {price_float}")
print(f"–¢–∏–ø–∏: {type(price_str).__name__} -> {type(price_float).__name__}")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–µ–ª —É —Ä—è–¥–∫–∏
number = 42
text = str(number)
print(f"\n–ß–∏—Å–ª–æ {number} -> –†—è–¥–æ–∫ '{text}'")
print(f"–¢–∏–ø–∏: {type(number).__name__} -> {type(text).__name__}")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É bool
print("\n–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É bool:")
print(f"bool(0) = {bool(0)}")  # False
print(f"bool(1) = {bool(1)}")  # True
print(f"bool(-5) = {bool(-5)}")  # True
print(f"bool('') = {bool('')}")  # False (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫)
print(f"bool('text') = {bool('text')}")  # True

# %% [markdown]
# ### –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
# 
# –ü—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∏–ø—ñ–≤ –º–æ–∂—É—Ç—å –≤–∏–Ω–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏. –í–∞–∂–ª–∏–≤–æ —ó—Ö –æ–±—Ä–æ–±–ª—è—Ç–∏!

# %%
# –ü—Ä–∏–∫–ª–∞–¥ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
def safe_int_conversion(value):
    """–ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É int –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        return int(value)
    except ValueError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: '{value}' –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —É —á–∏—Å–ª–æ!")
        return None

# –¢–µ—Å—Ç–∏
print("\n" + "=" * 80)
print("–ë–ï–ó–ü–ï–ß–ù–ï –ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø –¢–ò–ü–Ü–í")
print("=" * 80)

result1 = safe_int_conversion("123")
print(f"'123' -> {result1}")

result2 = safe_int_conversion("abc")
print(f"'abc' -> {result2}")

result3 = safe_int_conversion("12.5")
print(f"'12.5' -> {result3}")

# %% [markdown]
# ## 1.5 üìÅ –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å `input()` - –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
# 
# ### –ß–æ–º—É —Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ –∑–∞ input()?
# 
# 1. **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è**: –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Ä—É—á–Ω—É –≤–≤–æ–¥–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ–∂–µ–Ω —Ä–∞–∑
# 2. **–í–µ–ª–∏–∫—ñ –æ–±—Å—è–≥–∏ –¥–∞–Ω–∏—Ö**: –õ–µ–≥–∫–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ç–∏—Å—è—á–∞–º–∏ –∑–∞–ø–∏—Å—ñ–≤
# 3. **–ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ—Å—Ç—å**: –ú–æ–∂–Ω–∞ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑ —Ç–∏–º–∏ —Å–∞–º–∏–º–∏ –¥–∞–Ω–∏–º–∏
# 4. **–†–µ–∞–ª—å–Ω—ñ—Å—Ç—å**: –£ —Ä–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–∞–Ω—ñ –∑–∞–≤–∂–¥–∏ –∑ —Ñ–∞–π–ª—ñ–≤/–ë–î/API
# 5. **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è**: –õ–µ–≥—à–µ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–¥
# 
# ### –§–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:
# - **TXT** - –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
# - **CSV** - —Ç–∞–±–ª–∏—á–Ω—ñ –¥–∞–Ω—ñ (Comma Separated Values)
# - **JSON** - —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
# - **Excel** (.xlsx) - —Ç–∞–±–ª–∏—Ü—ñ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º

# %%
# –°—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏
print("\n" + "=" * 80)
print("–°–¢–í–û–†–ï–ù–ù–Ø –¢–ï–°–¢–û–í–ò–• –§–ê–ô–õ–Ü–í")
print("=" * 80)

# 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
with open('/home/claude/user_data.txt', 'w', encoding='utf-8') as f:
    f.write("–û–ª–µ–∫—Å–∞–Ω–¥—Ä\n")
    f.write("28\n")
    f.write("–ö–∏—ó–≤\n")
    f.write("1.82\n")

print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ user_data.txt")

# 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É
import csv

with open('/home/claude/employees.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(['–Ü–º\'—è', '–í—ñ–∫', '–ú—ñ—Å—Ç–æ', '–ó–∞—Ä–ø–ª–∞—Ç–∞'])
    writer.writerow(['–û–ª–µ–∫—Å–∞–Ω–¥—Ä', 28, '–ö–∏—ó–≤', 50000])
    writer.writerow(['–ú–∞—Ä—ñ—è', 25, '–õ—å–≤—ñ–≤', 48000])
    writer.writerow(['–Ü–≤–∞–Ω', 32, '–û–¥–µ—Å–∞', 55000])
    writer.writerow(['–°–≤—ñ—Ç–ª–∞–Ω–∞', 29, '–ö–∏—ó–≤', 52000])

print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ employees.csv")

# 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—É
import json

data = {
    "users": [
        {"name": "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "age": 28, "city": "–ö–∏—ó–≤", "skills": ["Python", "SQL"]},
        {"name": "–ú–∞—Ä—ñ—è", "age": 25, "city": "–õ—å–≤—ñ–≤", "skills": ["JavaScript", "React"]},
        {"name": "–Ü–≤–∞–Ω", "age": 32, "city": "–û–¥–µ—Å–∞", "skills": ["Java", "Spring"]}
    ]
}

with open('/home/claude/users.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ users.json")

# %% [markdown]
# ### –ß–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É

# %%
print("\n" + "=" * 80)
print("–ß–ò–¢–ê–ù–ù–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –§–ê–ô–õ–£")
print("=" * 80)

# –°–ø–æ—Å—ñ–± 1: –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ —Ñ–∞–π–ª—É
with open('/home/claude/user_data.txt', 'r', encoding='utf-8') as f:
    content = f.read()
    print("–í–µ—Å—å –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É:")
    print(content)

# –°–ø–æ—Å—ñ–± 2: –ß–∏—Ç–∞–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö
with open('/home/claude/user_data.txt', 'r', encoding='utf-8') as f:
    lines = f.readlines()
    name = lines[0].strip()
    age = int(lines[1].strip())
    city = lines[2].strip()
    height = float(lines[3].strip())
    
    print(f"\n–†–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ –¥–∞–Ω—ñ:")
    print(f"–Ü–º'—è: {name}")
    print(f"–í—ñ–∫: {age}")
    print(f"–ú—ñ—Å—Ç–æ: {city}")
    print(f"–ó—Ä—ñ—Å—Ç: {height} –º")

# %% [markdown]
# ### –ß–∏—Ç–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É
# 
# CSV (Comma-Separated Values) - —Ü–µ –æ–¥–∏–Ω –∑ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö. Python –º–∞—î –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å `csv`, –∞–ª–µ —â–µ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `pandas`.

# %%
print("\n" + "=" * 80)
print("–ß–ò–¢–ê–ù–ù–Ø CSV - –ë–∞–∑–æ–≤–∏–π —Å–ø–æ—Å—ñ–±")
print("=" * 80)

# –°–ø–æ—Å—ñ–± 1: –í–±—É–¥–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å csv
import csv

with open('/home/claude/employees.csv', 'r', encoding='utf-8') as f:
    reader = csv.DictReader(f)
    print("–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏:")
    for row in reader:
        print(f"  {row['–Ü–º\'—è']}, {row['–í—ñ–∫']} —Ä–æ–∫—ñ–≤, "
              f"{row['–ú—ñ—Å—Ç–æ']}, {row['–ó–∞—Ä–ø–ª–∞—Ç–∞']} –≥—Ä–Ω")

# %% [markdown]
# ### –ß–∏—Ç–∞–Ω–Ω—è CSV –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pandas
# 
# **pandas** - —Ü–µ –ø–æ—Ç—É–∂–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏. –í–æ–Ω–∞ —Ä–æ–±–∏—Ç—å —Ä–æ–±–æ—Ç—É –∑ CSV –Ω–∞–±–∞–≥–∞—Ç–æ –ø—Ä–æ—Å—Ç—ñ—à–æ—é!
# 
# –ü–µ—Ä–µ–≤–∞–≥–∏ pandas:
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
# - –ó—Ä—É—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
# - –õ–µ–≥–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
# - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —ñ–Ω—à–∏–º–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞–º–∏

# %%
# –°–ø–æ—Å—ñ–± 2: pandas (–†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
import pandas as pd

print("\n" + "=" * 80)
print("–ß–ò–¢–ê–ù–ù–Ø CSV - pandas")
print("=" * 80)

# –ß–∏—Ç–∞—î–º–æ CSV
df = pd.read_csv('/home/claude/employees.csv')

print("–ü–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è:")
print(df)

print("\n" + "-" * 40)
print("–ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(df.describe())

print("\n" + "-" * 40)
print("–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –º—ñ—Å—Ç–∞—Ö:")
print(df.groupby('–ú—ñ—Å—Ç–æ')['–ó–∞—Ä–ø–ª–∞—Ç–∞'].mean())

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
print("\n" + "-" * 40)
print("–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –∑ –ö–∏—î–≤–∞:")
kyiv_employees = df[df['–ú—ñ—Å—Ç–æ'] == '–ö–∏—ó–≤']
print(kyiv_employees)

# %% [markdown]
# ### –ß–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É
# 
# JSON (JavaScript Object Notation) - –ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –æ—Å–æ–±–ª–∏–≤–æ –≤ –≤–µ–±-—Ä–æ–∑—Ä–æ–±—Ü—ñ —Ç–∞ API.

# %%
print("\n" + "=" * 80)
print("–ß–ò–¢–ê–ù–ù–Ø JSON")
print("=" * 80)

with open('/home/claude/users.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

print("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
for user in data['users']:
    print(f"\nüë§ {user['name']}:")
    print(f"   –í—ñ–∫: {user['age']}")
    print(f"   –ú—ñ—Å—Ç–æ: {user['city']}")
    print(f"   –ù–∞–≤–∏—á–∫–∏: {', '.join(user['skills'])}")

# %% [markdown]
# ### –ü—Ä–∏–∫–ª–∞–¥: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑ —á–∏—Ç–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
# 
# –ü–æ—Ä—ñ–≤–Ω—è—î–º–æ –¥–≤–∞ –ø—ñ–¥—Ö–æ–¥–∏: input() vs —Ñ–∞–π–ª–∏

# %%
print("\n" + "=" * 80)
print("–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†: input() VS —Ñ–∞–π–ª–∏")
print("=" * 80)

# ‚ùå –°—Ç–∞—Ä–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ input() (–Ω–µ–∑—Ä—É—á–Ω–∏–π –¥–ª—è –±–∞–≥–∞—Ç–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
def calculator_with_input():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑ input - –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–æ–¥–∏—Ç–∏ –∫–æ–∂–µ–Ω —Ä–∞–∑ –≤—Ä—É—á–Ω—É"""
    # num1 = float(input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: "))
    # num2 = float(input("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: "))
    # operation = input("–û–ø–µ—Ä–∞—Ü—ñ—è (+, -, *, /): ")
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:
    num1, num2, operation = 10, 5, "+"
    
    if operation == '+':
        result = num1 + num2
    elif operation == '-':
        result = num1 - num2
    elif operation == '*':
        result = num1 * num2
    elif operation == '/':
        result = num1 / num2
    else:
        result = None
    
    print(f"{num1} {operation} {num2} = {result}")

# ‚úÖ –°—É—á–∞—Å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ —Ñ–∞–π–ª–∞–º–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è)
def calculator_with_file(filename):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑ —Ñ–∞–π–ª–æ–º - –º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –±–∞–≥–∞—Ç–æ –æ–ø–µ—Ä–∞—Ü—ñ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"""
    with open(filename, 'r') as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) != 3:
                continue
            
            num1 = float(parts[0])
            operation = parts[1]
            num2 = float(parts[2])
            
            if operation == '+':
                result = num1 + num2
            elif operation == '-':
                result = num1 - num2
            elif operation == '*':
                result = num1 * num2
            elif operation == '/':
                result = num1 / num2 if num2 != 0 else 'Error: Division by zero'
            
            print(f"{num1} {operation} {num2} = {result}")

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
with open('/home/claude/calculations.txt', 'w') as f:
    f.write("10 + 5\n")
    f.write("20 - 8\n")
    f.write("7 * 6\n")
    f.write("100 / 4\n")
    f.write("15 * 3\n")

print("\n–ü—ñ–¥—Ö—ñ–¥ –∑ —Ñ–∞–π–ª–æ–º (–º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –±–∞–≥–∞—Ç–æ –æ–ø–µ—Ä–∞—Ü—ñ–π):")
calculator_with_file('/home/claude/calculations.txt')

# %% [markdown]
# ## 1.6 üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
# 
# Python –º–∞—î –±–µ–∑–ª—ñ—á –±—ñ–±–ª—ñ–æ—Ç–µ–∫, —è–∫—ñ –≤–∂–µ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å —Ç–∏–ø–æ–≤—ñ –∑–∞–¥–∞—á—ñ. –ù–µ –≤–∞—Ä—Ç–æ "–≤–∏–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥"!

# %%
print("\n" + "=" * 80)
print("–°–ü–ï–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–Ü –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ò")
print("=" * 80)

# 1. datetime - —Ä–æ–±–æ—Ç–∞ –∑ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
from datetime import datetime, timedelta

print("\nüìÖ datetime - –†–æ–±–æ—Ç–∞ –∑ –¥–∞—Ç–æ—é —ñ —á–∞—Å–æ–º:")
now = datetime.now()
print(f"–ó–∞—Ä–∞–∑: {now}")
print(f"–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ: {now.strftime('%d.%m.%Y %H:%M:%S')}")
print(f"–ß–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å: {now + timedelta(days=7)}")

# 2. random - –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞
import random

print("\nüé≤ random - –í–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞:")
print(f"–í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ (0-100): {random.randint(0, 100)}")
print(f"–í–∏–ø–∞–¥–∫–æ–≤–µ float (0-1): {random.random():.4f}")
print(f"–í–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É: {random.choice(['Python', 'Java', 'C++', 'JavaScript'])}")

# 3. statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
import statistics

data = [23, 45, 67, 23, 89, 12, 45, 67, 89, 45]
print("\nüìä statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"–î–∞–Ω—ñ: {data}")
print(f"–°–µ—Ä–µ–¥–Ω—î: {statistics.mean(data):.2f}")
print(f"–ú–µ–¥—ñ–∞–Ω–∞: {statistics.median(data)}")
print(f"–ú–æ–¥–∞: {statistics.mode(data)}")
print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {statistics.stdev(data):.2f}")

# 4. pathlib - —Ä–æ–±–æ—Ç–∞ –∑—ñ —à–ª—è—Ö–∞–º–∏
from pathlib import Path

print("\nüìÅ pathlib - –†–æ–±–æ—Ç–∞ –∑—ñ —à–ª—è—Ö–∞–º–∏:")
current_file = Path('/home/claude/output_example.txt')
print(f"–Ü—Å–Ω—É—î: {current_file.exists()}")
print(f"–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {current_file.suffix}")
print(f"–Ü–º'—è —Ñ–∞–π–ª—É: {current_file.name}")
print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {current_file.parent}")

# %% [markdown]
# ---
# 
# # üîß –ß–∞—Å—Ç–∏–Ω–∞ 2: Functions (–§—É–Ω–∫—Ü—ñ—ó)
# 
# ## 2.1 –©–æ —Ç–∞–∫–µ —Ñ—É–Ω–∫—Ü—ñ—è?
# 
# **–§—É–Ω–∫—Ü—ñ—è** - —Ü–µ —ñ–º–µ–Ω–æ–≤–∞–Ω–∏–π –±–ª–æ–∫ –∫–æ–¥—É, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∑–∞–¥–∞—á—É. –§—É–Ω–∫—Ü—ñ—ó - –æ—Å–Ω–æ–≤–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
# 
# ### –ù–∞–≤—ñ—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó?
# 
# 1. **DRY –ø—Ä–∏–Ω—Ü–∏–ø** (Don't Repeat Yourself) - –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π—Ç–µ –∫–æ–¥
# 2. **–ß–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å** - –∫–æ–¥ –ª–µ–≥—à–µ —á–∏—Ç–∞—Ç–∏ —Ç–∞ —Ä–æ–∑—É–º—ñ—Ç–∏
# 3. **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è** - –ª–µ–≥—à–µ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# 4. **–ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è** - –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤
# 5. **–ê–±—Å—Ç—Ä–∞–∫—Ü—ñ—è** - —Ö–æ–≤–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
# 
# ### –°–∏–Ω—Ç–∞–∫—Å–∏—Å:
# ```python
# def function_name(parameters):
#     """Docstring - –æ–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ—ó"""
#     # –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó
#     return result
# ```

# %%
print("\n" + "=" * 80)
print("–û–°–ù–û–í–ò –§–£–ù–ö–¶–Ü–ô")
print("=" * 80)

# –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def say_hello():
    """–í–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"""
    print("–ü—Ä–∏–≤—ñ—Ç!")

say_hello()
say_hello()  # –ú–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤

# –§—É–Ω–∫—Ü—ñ—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
def greet(name):
    """
    –í—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —ñ–º'—è–º
    
    Args:
        name (str): –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    print(f"–ü—Ä–∏–≤—ñ—Ç, {name}!")

greet("–û–ª–µ–∫—Å–∞–Ω–¥—Ä")
greet("–ú–∞—Ä—ñ—è")

# –§—É–Ω–∫—Ü—ñ—è –∑ –∫—ñ–ª—å–∫–æ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def greet_with_time(name, time_of_day):
    """–í—ñ—Ç–∞—î –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É –¥–æ–±–∏"""
    print(f"–î–æ–±—Ä–æ–≥–æ {time_of_day}, {name}!")

greet_with_time("–Ü–≤–∞–Ω", "—Ä–∞–Ω–∫—É")
greet_with_time("–°–≤—ñ—Ç–ª–∞–Ω–∞", "–≤–µ—á–æ—Ä–∞")

# %% [markdown]
# ## 2.2 –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å (return)
# 
# –§—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥—ñ—ó, –∞–ª–µ –π **–ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `return`.

# %%
print("\n" + "=" * 80)
print("–ü–û–í–ï–†–ù–ï–ù–ù–Ø –ó–ù–ê–ß–ï–ù–¨")
print("=" * 80)

# –§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è
def add(a, b):
    """–î–æ–¥–∞—î –¥–≤–∞ —á–∏—Å–ª–∞"""
    return a + b

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
result = add(5, 3)
print(f"5 + 3 = {result}")

# –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤–∏—Ä–∞–∑–∞—Ö
total = add(10, 20) + add(5, 15)
print(f"(10+20) + (5+15) = {total}")

# –§—É–Ω–∫—Ü—ñ—è –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ return
def absolute_value(x):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∞–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–∞"""
    if x >= 0:
        return x
    else:
        return -x

print(f"|5| = {absolute_value(5)}")
print(f"|-7| = {absolute_value(-7)}")

# %% [markdown]
# ### –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∑–Ω–∞—á–µ–Ω—å
# 
# Python –¥–æ–∑–≤–æ–ª—è—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞—á–µ–Ω—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ (–Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —Ü–µ –∫–æ—Ä—Ç–µ–∂).

# %%
def divide_with_remainder(a, b):
    """
    –î—ñ–ª–∏—Ç—å —á–∏—Å–ª–∞ –∑ –æ—Å—Ç–∞—á–µ—é
    
    Args:
        a: –î—ñ–ª–µ–Ω–µ
        b: –î—ñ–ª—å–Ω–∏–∫
    
    Returns:
        tuple: (—á–∞—Å—Ç–∫–∞, –æ—Å—Ç–∞—á–∞)
    """
    quotient = a // b
    remainder = a % b
    return quotient, remainder

# –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
q, r = divide_with_remainder(17, 5)
print(f"17 √∑ 5 = {q} (–æ—Å—Ç–∞—á–∞ {r})")

# –ê–±–æ —è–∫ –∫–æ—Ä—Ç–µ–∂
result = divide_with_remainder(23, 7)
print(f"23 √∑ 7 = {result}")

# %% [markdown]
# ## 2.3 –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
# 
# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º. –¶–µ —Ä–æ–±–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–º–∏.

# %%
print("\n" + "=" * 80)
print("–ü–ê–†–ê–ú–ï–¢–†–ò –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú")
print("=" * 80)

def power(base, exponent=2):
    """
    –ü—ñ–¥–Ω–µ—Å–µ–Ω–Ω—è –¥–æ —Å—Ç–µ–ø–µ–Ω—è
    
    Args:
        base: –û—Å–Ω–æ–≤–∞
        exponent: –ü–æ–∫–∞–∑–Ω–∏–∫ —Å—Ç–µ–ø–µ–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2)
    """
    return base ** exponent

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
print(f"5^2 = {power(5)}")

# –í–∫–∞–∑—É—î–º–æ —Å–≤—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫
print(f"5^3 = {power(5, 3)}")
print(f"2^10 = {power(2, 10)}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
def greet_person(name, greeting="–ü—Ä–∏–≤—ñ—Ç", punctuation="!"):
    """–ì–Ω—É—á–∫–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"""
    return f"{greeting}, {name}{punctuation}"

print(greet_person("–ê–Ω–¥—Ä—ñ–π"))
print(greet_person("–ú–∞—Ä—ñ—è", "–í—ñ—Ç–∞—é"))
print(greet_person("–Ü–≤–∞–Ω", "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è", "."))

# %% [markdown]
# ## 2.4 –Ü–º–µ–Ω–æ–≤–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (keyword arguments)
# 
# –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂–Ω–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –¶–µ –ø–æ–∫—Ä–∞—â—É—î —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å!

# %%
print("\n" + "=" * 80)
print("–Ü–ú–ï–ù–û–í–ê–ù–Ü –ê–†–ì–£–ú–ï–ù–¢–ò")
print("=" * 80)

def create_profile(name, age, city, occupation):
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return {
        'name': name,
        'age': age,
        'city': city,
        'occupation': occupation
    }

# –ü–æ–∑–∏—Ü—ñ–π–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–Ω–µ –¥—É–∂–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ)
profile1 = create_profile("–û–ª–µ–∫—Å–∞–Ω–¥—Ä", 28, "–ö–∏—ó–≤", "Developer")
print(profile1)

# –Ü–º–µ–Ω–æ–≤–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–Ω–∞–±–∞–≥–∞—Ç–æ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—à–µ!)
profile2 = create_profile(
    name="–ú–∞—Ä—ñ—è",
    age=25,
    city="–õ—å–≤—ñ–≤",
    occupation="Designer"
)
print(profile2)

# –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫
profile3 = create_profile(
    age=30,
    name="–Ü–≤–∞–Ω",
    occupation="Manager",
    city="–û–¥–µ—Å–∞"
)
print(profile3)

# %% [markdown]
# ## 2.5 *args —Ç–∞ **kwargs - –ó–º—ñ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
# 
# - `*args` - –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
# - `**kwargs` - –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤

# %%
print("\n" + "=" * 80)
print("*args –¢–ê **kwargs")
print("=" * 80)

# *args - –∑–º—ñ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
def sum_all(*args):
    """–°—É–º–∞ –≤—Å—ñ—Ö –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö —á–∏—Å–µ–ª"""
    return sum(args)

print(f"sum_all(1, 2, 3) = {sum_all(1, 2, 3)}")
print(f"sum_all(1, 2, 3, 4, 5) = {sum_all(1, 2, 3, 4, 5)}")
print(f"sum_all(10, 20) = {sum_all(10, 20)}")

# **kwargs - –∑–º—ñ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω–æ–≤–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
def print_info(**kwargs):
    """–í–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É –≤–∏–≥–ª—è–¥—ñ –∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–Ω—è"""
    for key, value in kwargs.items():
        print(f"  {key}: {value}")

print("\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
print_info(name="–û–ª–µ–∫—Å–∞–Ω–¥—Ä", age=28, city="–ö–∏—ó–≤", job="Developer")

print("\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç:")
print_info(title="–ù–æ—É—Ç–±—É–∫", price=25000, brand="Dell", color="–°—ñ—Ä–∏–π")

# –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ
def create_user(name, *hobbies, **details):
    """–°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ö–æ–±—ñ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—é"""
    print(f"\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {name}")
    print(f"–•–æ–±—ñ: {', '.join(hobbies)}")
    print("–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
    for key, value in details.items():
        print(f"  {key}: {value}")

create_user(
    "–ú–∞—Ä—ñ—è",
    "–ß–∏—Ç–∞–Ω–Ω—è", "–ü–æ–¥–æ—Ä–æ–∂—ñ", "–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è",
    age=25,
    city="–õ—å–≤—ñ–≤",
    occupation="–î–∏–∑–∞–π–Ω–µ—Ä"
)

# %% [markdown]
# ## 2.6 –õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó (–∞–Ω–æ–Ω—ñ–º–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)
# 
# **–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó** - —Ü–µ –º–∞–ª–µ–Ω—å–∫—ñ –∞–Ω–æ–Ω—ñ–º–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫.
# 
# –°–∏–Ω—Ç–∞–∫—Å–∏—Å: `lambda arguments: expression`
# 
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è:
# - –ü—Ä–æ—Å—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
# - –ö–æ—Ä–æ—Ç–∫–∏—Ö callback-—Ñ—É–Ω–∫—Ü—ñ–π
# - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó

# %%
print("\n" + "=" * 80)
print("–õ–Ø–ú–ë–î–ê-–§–£–ù–ö–¶–Ü–á")
print("=" * 80)

# –ó–≤–∏—á–∞–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def square(x):
    return x ** 2

# –¢–µ —Å–∞–º–µ —á–µ—Ä–µ–∑ –ª—è–º–±–¥—É
square_lambda = lambda x: x ** 2

print(f"square(5) = {square(5)}")
print(f"square_lambda(5) = {square_lambda(5)}")

# –õ—è–º–±–¥–∞ –∑ –∫—ñ–ª—å–∫–æ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
add = lambda a, b: a + b
multiply = lambda a, b: a * b

print(f"\n10 + 5 = {add(10, 5)}")
print(f"10 * 5 = {multiply(10, 5)}")

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
numbers = [1, 2, 3, 4, 5]

# map() - –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
squared = list(map(lambda x: x ** 2, numbers))
print(f"\n–ö–≤–∞–¥—Ä–∞—Ç–∏: {numbers} -> {squared}")

# filter() - –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
evens = list(filter(lambda x: x % 2 == 0, numbers))
print(f"–ü–∞—Ä–Ω—ñ: {evens}")

# sorted() –∑ –ª—è–º–±–¥–æ—é –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
students = [
    {'name': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', 'grade': 85},
    {'name': '–ú–∞—Ä—ñ—è', 'grade': 92},
    {'name': '–Ü–≤–∞–Ω', 'grade': 78},
    {'name': '–°–≤—ñ—Ç–ª–∞–Ω–∞', 'grade': 95}
]

sorted_students = sorted(students, key=lambda s: s['grade'], reverse=True)
print("\n–°—Ç—É–¥–µ–Ω—Ç–∏ –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é (–≤—ñ–¥ –≤–∏—â–æ—ó –¥–æ –Ω–∏–∂—á–æ—ó):")
for student in sorted_students:
    print(f"  {student['name']}: {student['grade']}")

# %% [markdown]
# ## 2.7 –û–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ (Scope)
# 
# Python –º–∞—î —Ä—ñ–∑–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö:
# 
# 1. **Local** - –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# 2. **Enclosing** - —É –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó (–¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π)
# 3. **Global** - –Ω–∞ —Ä—ñ–≤–Ω—ñ –º–æ–¥—É–ª—è
# 4. **Built-in** - –≤–±—É–¥–æ–≤–∞–Ω—ñ —ñ–º–µ–Ω–∞ Python

# %%
print("\n" + "=" * 80)
print("–û–ë–õ–ê–°–¢–Ü –í–ò–î–ò–ú–û–°–¢–Ü")
print("=" * 80)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
global_var = "–Ø –≥–ª–æ–±–∞–ª—å–Ω–∞"

def outer_function():
    # –ó–º—ñ–Ω–Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó (enclosing)
    enclosing_var = "–Ø enclosing"
    
    def inner_function():
        # –õ–æ–∫–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
        local_var = "–Ø –ª–æ–∫–∞–ª—å–Ω–∞"
        
        print(f"  –õ–æ–∫–∞–ª—å–Ω–∞: {local_var}")
        print(f"  Enclosing: {enclosing_var}")
        print(f"  –ì–ª–æ–±–∞–ª—å–Ω–∞: {global_var}")
    
    inner_function()
    print(f"  –£ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: {enclosing_var}")
    # print(local_var)  # ‚ùå –ü–æ–º–∏–ª–∫–∞!

outer_function()
print(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞: {global_var}")

# –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
counter = 0

def increment_bad():
    """‚ùå –ù–µ —Å–ø—Ä–∞—Ü—é—î - —Å—Ç–≤–æ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É"""
    counter = counter + 1  # UnboundLocalError!

def increment_good():
    """‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ global"""
    global counter
    counter += 1

print(f"\n–õ—ñ—á–∏–ª—å–Ω–∏–∫ –¥–æ: {counter}")
increment_good()
print(f"–õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è: {counter}")
increment_good()
print(f"–õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è: {counter}")

# %% [markdown]
# ## 2.8 –í–±—É–¥–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó Python
# 
# Python –º–∞—î –±–∞–≥–∞—Ç–æ –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö –∑–∞–º—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π!

# %%
print("\n" + "=" * 80)
print("–í–ë–£–î–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á PYTHON")
print("=" * 80)

numbers = [23, 45, 12, 67, 89, 34, 56]

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
print("–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
print(f"  sum: {sum(numbers)}")
print(f"  min: {min(numbers)}")
print(f"  max: {max(numbers)}")
print(f"  abs(-10): {abs(-10)}")
print(f"  pow(2, 10): {pow(2, 10)}")
print(f"  round(3.14159, 2): {round(3.14159, 2)}")

# –†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏
print("\n–†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏:")
print(f"  len: {len(numbers)}")
print(f"  sorted: {sorted(numbers)}")
print(f"  reversed: {list(reversed(numbers))}")

# –†–æ–±–æ—Ç–∞ –∑ —Ç–∏–ø–∞–º–∏
print("\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤:")
print(f"  isinstance(5, int): {isinstance(5, int)}")
print(f"  isinstance('text', str): {isinstance('text', str)}")
print(f"  type(3.14): {type(3.14)}")

# –†–æ–±–æ—Ç–∞ –∑ —Ä—è–¥–∫–∞–º–∏ —Ç–∞ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
print("\n–†–æ–±–æ—Ç–∞ –∑ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
print(f"  all([True, True, True]): {all([True, True, True])}")
print(f"  all([True, False, True]): {all([True, False, True])}")
print(f"  any([False, False, True]): {any([False, False, True])}")

# enumerate - –Ω—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
print("\nenumerate:")
fruits = ['—è–±–ª—É–∫–æ', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω']
for index, fruit in enumerate(fruits, start=1):
    print(f"  {index}. {fruit}")

# zip - –æ–±'—î–¥–Ω–∞–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤
print("\nzip:")
names = ['–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä—ñ—è', '–Ü–≤–∞–Ω']
ages = [28, 25, 32]
for name, age in zip(names, ages):
    print(f"  {name}: {age} —Ä–æ–∫—ñ–≤")

# %% [markdown]
# ## 2.9 –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ - –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
# 
# **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏** –¥–æ–∑–≤–æ–ª—è—é—Ç—å –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ –∑–º—ñ–Ω–∏ —ó—Ö –∫–æ–¥—É.
# 
# –¢–∏–ø–æ–≤—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
# - –õ–æ–≥—É–≤–∞–Ω–Ω—è
# - –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
# - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
# - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

# %%
import time
import functools

print("\n" + "=" * 80)
print("–î–ï–ö–û–†–ê–¢–û–†–ò")
print("=" * 80)

# –ü—Ä–æ—Å—Ç–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def log_function_call(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print(f"üìû –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó: {func.__name__}")
        result = func(*args, **kwargs)
        print(f"‚úÖ –§—É–Ω–∫—Ü—ñ—è {func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return result
    return wrapper

@log_function_call
def calculate_sum(a, b):
    """–î–æ–¥–∞—î –¥–≤–∞ —á–∏—Å–ª–∞"""
    return a + b

result = calculate_sum(10, 20)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
def measure_time(func):
    """–í–∏–º—ñ—Ä—é—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"‚è±Ô∏è  {func.__name__} –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—å {end - start:.6f} —Å–µ–∫—É–Ω–¥")
        return result
    return wrapper

@measure_time
def slow_function():
    """–ü–æ–≤—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    time.sleep(0.1)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
    return sum(range(100000))

result = slow_function()
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n")

# –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
@log_function_call
@measure_time
def complex_calculation(n):
    """–°–∫–ª–∞–¥–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è"""
    return sum(i ** 2 for i in range(n))

result = complex_calculation(10000)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

# %% [markdown]
# ## 2.10 –î–æ–∫—É–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π (Docstrings)
# 
# **Docstring** - —Ü–µ —Ä—è–¥–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó. –í—ñ–Ω –æ–ø–∏—Å—É—î —â–æ —Ä–æ–±–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—ñ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î.
# 
# ### –§–æ—Ä–º–∞—Ç–∏ docstring:
# - **Google Style** (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è)
# - NumPy Style
# - reStructuredText

# %%
print("\n" + "=" * 80)
print("–î–û–ö–£–ú–ï–ù–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô")
print("=" * 80)

def calculate_bmi(weight, height):
    """
    –û–±—á–∏—Å–ª—é—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (BMI).
    
    BMI = –≤–∞–≥–∞ (–∫–≥) / (–∑—Ä—ñ—Å—Ç (–º))¬≤
    
    Args:
        weight (float): –í–∞–≥–∞ –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö
        height (float): –ó—Ä—ñ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö
    
    Returns:
        float: –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
    
    Raises:
        ValueError: –Ø–∫—â–æ –≤–∞–≥–∞ –∞–±–æ –∑—Ä—ñ—Å—Ç <= 0
    
    Examples:
        >>> calculate_bmi(70, 1.75)
        22.86
        
        >>> calculate_bmi(85, 1.80)
        26.23
    """
    if weight <= 0 or height <= 0:
        raise ValueError("–í–∞–≥–∞ —Ç–∞ –∑—Ä—ñ—Å—Ç –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏")
    
    return weight / (height ** 2)

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
bmi = calculate_bmi(70, 1.75)
print(f"BMI: {bmi:.2f}")

# –ü–µ—Ä–µ–≥–ª—è–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
print("\n–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó:")
print(calculate_bmi.__doc__)

# –ê–±–æ —á–µ—Ä–µ–∑ help()
# help(calculate_bmi)

# %% [markdown]
# ## 2.11 –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±—ñ–±–ª—ñ–æ—Ç–µ–∫
# 
# –†–æ–∑–≥–ª—è–Ω–µ–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏, –¥–µ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –∑ –¥–∞–Ω–∏–º–∏ –∑ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞–º–∏.

# %%
print("\n" + "=" * 80)
print("–ü–†–ê–ö–¢–ò–ß–ù–Ü –ü–†–ò–ö–õ–ê–î–ò")
print("=" * 80)

# –ü—Ä–∏–∫–ª–∞–¥ 1: –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∑ CSV
def analyze_employees(filename):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É
    
    Args:
        filename (str): –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º
    """
    df = pd.read_csv(filename)
    
    stats = {
        'total_employees': len(df),
        'average_age': df['–í—ñ–∫'].mean(),
        'average_salary': df['–ó–∞—Ä–ø–ª–∞—Ç–∞'].mean(),
        'cities': df['–ú—ñ—Å—Ç–æ'].unique().tolist(),
        'salary_by_city': df.groupby('–ú—ñ—Å—Ç–æ')['–ó–∞—Ä–ø–ª–∞—Ç–∞'].mean().to_dict()
    }
    
    return stats

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
stats = analyze_employees('/home/claude/employees.csv')
print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:")
print(f"–í—Å—å–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤: {stats['total_employees']}")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫: {stats['average_age']:.1f} —Ä–æ–∫—ñ–≤")
print(f"–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {stats['average_salary']:.2f} –≥—Ä–Ω")
print(f"–ú—ñ—Å—Ç–∞: {', '.join(stats['cities'])}")
print("–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –º—ñ—Å—Ç–∞—Ö:")
for city, salary in stats['salary_by_city'].items():
    print(f"  {city}: {salary:.2f} –≥—Ä–Ω")

# %% [markdown]
# ### –ü—Ä–∏–∫–ª–∞–¥ 2: –†–æ–±–æ—Ç–∞ –∑ –¥–∞—Ç–∞–º–∏

# %%
from datetime import datetime, timedelta

def calculate_age(birth_date_str):
    """
    –û–±—á–∏—Å–ª—é—î –≤—ñ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    
    Args:
        birth_date_str (str): –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ 'YYYY-MM-DD'
    
    Returns:
        int: –í—ñ–∫ —É —Ä–æ–∫–∞—Ö
    """
    birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
    today = datetime.now()
    age = today.year - birth_date.year
    
    # –ö–æ—Ä–∏–≥—É—î–º–æ, —è–∫—â–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —Ü—å–æ–≥–æ —Ä–æ–∫—É
    if today.month < birth_date.month or \
       (today.month == birth_date.month and today.day < birth_date.day):
        age -= 1
    
    return age

def days_until_birthday(birth_date_str):
    """–û–±—á–∏—Å–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
    birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
    today = datetime.now()
    
    # –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    next_birthday = birth_date.replace(year=today.year)
    if next_birthday < today:
        next_birthday = next_birthday.replace(year=today.year + 1)
    
    days = (next_birthday - today).days
    return days

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
birth_date = "1995-06-15"
print(f"\n–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_date}")
print(f"–í—ñ–∫: {calculate_age(birth_date)} —Ä–æ–∫—ñ–≤")
print(f"–î–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {days_until_birthday(birth_date)}")

# %% [markdown]
# ### –ü—Ä–∏–∫–ª–∞–¥ 3: –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö

# %%
import re
from collections import Counter

def analyze_text_file(filename):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    
    Args:
        filename (str): –®–ª—è—Ö –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    """
    with open(filename, 'r', encoding='utf-8') as f:
        text = f.read()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é —ñ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
    words = re.findall(r'\b[–∞-—è—ñ—ó—î“ëa-z]+\b', text.lower())
    
    stats = {
        'total_characters': len(text),
        'total_words': len(words),
        'unique_words': len(set(words)),
        'average_word_length': sum(len(word) for word in words) / len(words) if words else 0,
        'most_common_words': Counter(words).most_common(5)
    }
    
    return stats

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
test_text = """
Python —Ü–µ –ø–æ—Ç—É–∂–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
Python –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ –ø–∞—Ä–∞–¥–∏–≥–º–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ Python —Ü–µ —Ü—ñ–∫–∞–≤–æ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–æ.
Python –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∏, –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.
"""

with open('/home/claude/test_text.txt', 'w', encoding='utf-8') as f:
    f.write(test_text)

# –ê–Ω–∞–ª—ñ–∑
text_stats = analyze_text_file('/home/claude/test_text.txt')
print("\nüìù –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É:")
print(f"–í—Å—å–æ–≥–æ —Å–∏–º–≤–æ–ª—ñ–≤: {text_stats['total_characters']}")
print(f"–í—Å—å–æ–≥–æ —Å–ª—ñ–≤: {text_stats['total_words']}")
print(f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤: {text_stats['unique_words']}")
print(f"–°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Å–ª–æ–≤–∞: {text_stats['average_word_length']:.2f}")
print("\n–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Å–ª–æ–≤–∞:")
for word, count in text_stats['most_common_words']:
    print(f"  {word}: {count} —Ä–∞–∑(—ñ–≤)")

# %% [markdown]
# ### –ü—Ä–∏–∫–ª–∞–¥ 4: –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ numpy

# %%
import numpy as np

def calculate_statistics(data):
    """
    –û–±—á–∏—Å–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–∞—Å–∏–≤—É –¥–∞–Ω–∏—Ö
    
    Args:
        data (list or np.array): –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    """
    arr = np.array(data)
    
    return {
        'mean': np.mean(arr),
        'median': np.median(arr),
        'std': np.std(arr),
        'min': np.min(arr),
        'max': np.max(arr),
        'percentile_25': np.percentile(arr, 25),
        'percentile_75': np.percentile(arr, 75)
    }

def normalize_data(data):
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É [0, 1]"""
    arr = np.array(data)
    min_val = np.min(arr)
    max_val = np.max(arr)
    return (arr - min_val) / (max_val - min_val)

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
data = [23, 45, 12, 67, 89, 34, 56, 78, 23, 45]

print("\nüî¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:")
stats = calculate_statistics(data)
for key, value in stats.items():
    print(f"  {key}: {value:.2f}")

print("\n–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:", data)
print("–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ:", normalize_data(data).round(3).tolist())

# %% [markdown]
# ## 2.12 –†–µ–∫—É—Ä—Å–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# 
# **–†–µ–∫—É—Ä—Å—ñ—è** - —Ü–µ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î —Å–∞–º—É —Å–µ–±–µ. –ü–æ—Ç—É–∂–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –∑–∞–¥–∞—á.
# 
# ### –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—é:
# - –†–æ–±–æ—Ç–∞ –∑ –¥–µ—Ä–µ–≤–æ–≤–∏–¥–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
# - –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ (—Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª, –§—ñ–±–æ–Ω–∞—á—á—ñ)
# - –û–±—Ö—ñ–¥ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
# - –ê–ª–≥–æ—Ä–∏—Ç–º–∏ "—Ä–æ–∑–¥—ñ–ª—è–π —ñ –≤–æ–ª–æ–¥–∞—Ä—é–π"

# %%
print("\n" + "=" * 80)
print("–†–ï–ö–£–†–°–ò–í–ù–Ü –§–£–ù–ö–¶–Ü–á")
print("=" * 80)

# –ü—Ä–∏–∫–ª–∞–¥ 1: –§–∞–∫—Ç–æ—Ä—ñ–∞–ª
def factorial(n):
    """
    –û–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    
    Args:
        n (int): –ù–µ–≤—ñ–¥'—î–º–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
    
    Returns:
        int: n! = n * (n-1) * (n-2) * ... * 1
    """
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

print("–§–∞–∫—Ç–æ—Ä—ñ–∞–ª–∏:")
for i in range(6):
    print(f"  {i}! = {factorial(i)}")

# –ü—Ä–∏–∫–ª–∞–¥ 2: –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ
def fibonacci(n):
    """–û–±—á–∏—Å–ª—é—î n-—Ç–µ —á–∏—Å–ª–æ –§—ñ–±–æ–Ω–∞—á—á—ñ"""
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

print("\n–ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ:")
fib_numbers = [fibonacci(i) for i in range(10)]
print(f"  –ü–µ—Ä—à—ñ 10: {fib_numbers}")

# –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–µ–º–æ—ó–∑–∞—Ü—ñ—î—é
@functools.lru_cache(maxsize=None)
def fibonacci_optimized(n):
    """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –§—ñ–±–æ–Ω–∞—á—á—ñ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
    if n <= 1:
        return n
    return fibonacci_optimized(n - 1) + fibonacci_optimized(n - 2)

print(f"  50-—Ç–µ —á–∏—Å–ª–æ –§—ñ–±–æ–Ω–∞—á—á—ñ: {fibonacci_optimized(50)}")

# –ü—Ä–∏–∫–ª–∞–¥ 3: –°—É–º–∞ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
def sum_of_digits(n):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—á–∏—Å–ª—é—î —Å—É–º—É —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞"""
    if n < 10:
        return n
    return n % 10 + sum_of_digits(n // 10)

print("\n–°—É–º–∞ —Ü–∏—Ñ—Ä:")
numbers_to_test = [123, 456, 7890]
for num in numbers_to_test:
    print(f"  –°—É–º–∞ —Ü–∏—Ñ—Ä {num} = {sum_of_digits(num)}")

# %% [markdown]
# ## 2.13 –§—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
# 
# **–§—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É** - —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ:
# - –ü—Ä–∏–π–º–∞—é—Ç—å —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
# - –ü–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# 
# –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É: `map()`, `filter()`, `reduce()`, `sorted()`

# %%
from functools import reduce

print("\n" + "=" * 80)
print("–§–£–ù–ö–¶–Ü–á –í–ò–©–û–ì–û –ü–û–†–Ø–î–ö–£")
print("=" * 80)

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# map() - –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
print("map() - –∫–≤–∞–¥—Ä–∞—Ç–∏ —á–∏—Å–µ–ª:")
squares = list(map(lambda x: x ** 2, numbers))
print(f"  {numbers}")
print(f"  {squares}")

# filter() - –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
print("\nfilter() - —Ç—ñ–ª—å–∫–∏ –ø–∞—Ä–Ω—ñ:")
evens = list(filter(lambda x: x % 2 == 0, numbers))
print(f"  {evens}")

# reduce() - –∑–≥–æ—Ä–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
print("\nreduce() - –¥–æ–±—É—Ç–æ–∫ –≤—Å—ñ—Ö —á–∏—Å–µ–ª:")
product = reduce(lambda x, y: x * y, numbers)
print(f"  {product}")

# –í–ª–∞—Å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
def apply_twice(func, value):
    """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–≤—ñ—á—ñ"""
    return func(func(value))

print("\napply_twice():")
print(f"  (5 + 1) + 1 = {apply_twice(lambda x: x + 1, 5)}")
print(f"  (2 * 2) * 2 = {apply_twice(lambda x: x * 2, 2)}")

# –§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—é
def make_multiplier(n):
    """–°—Ç–≤–æ—Ä—é—î —Ñ—É–Ω–∫—Ü—ñ—é-–º–Ω–æ–∂–Ω–∏–∫"""
    return lambda x: x * n

multiply_by_5 = make_multiplier(5)
multiply_by_10 = make_multiplier(10)

print("\n–§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—é:")
print(f"  7 * 5 = {multiply_by_5(7)}")
print(f"  7 * 10 = {multiply_by_10(7)}")

# %% [markdown]
# ## 2.14 Type Hints - –ê–Ω–æ—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
# 
# **Type hints** (–ø—ñ–¥–∫–∞–∑–∫–∏ —Ç–∏–ø—ñ–≤) - —Ü–µ —Å–ø–æ—Å—ñ–± –≤–∫–∞–∑–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π. –í–æ–Ω–∏ –ø–æ–∫—Ä–∞—â—É—é—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –≤–∏—è–≤–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏.
# 
# ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# - –ö—Ä–∞—â–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –∫–æ–¥—É
# - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ IDE (–∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤)
# - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–æ–¥—É
# - –°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (mypy, pyright)

# %%
from typing import List, Dict, Tuple, Optional, Union

print("\n" + "=" * 80)
print("TYPE HINTS")
print("=" * 80)

def greet_user(name: str, age: int) -> str:
    """
    –í—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        name: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        age: –í—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Returns:
        –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    return f"–ü—Ä–∏–≤—ñ—Ç, {name}! –¢–æ–±—ñ {age} —Ä–æ–∫—ñ–≤."

def calculate_average(numbers: List[float]) -> float:
    """–û–±—á–∏—Å–ª—é—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —á–∏—Å–µ–ª"""
    return sum(numbers) / len(numbers) if numbers else 0.0

def find_user(user_id: int) -> Optional[Dict[str, Union[str, int]]]:
    """
    –®—É–∫–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
    
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None
    """
    users = {
        1: {"name": "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "age": 28},
        2: {"name": "–ú–∞—Ä—ñ—è", "age": 25}
    }
    return users.get(user_id)

def process_data(data: Union[List, Tuple]) -> int:
    """–û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∫–æ—Ä—Ç–µ–∂—É"""
    return len(data)

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
print(greet_user("–Ü–≤–∞–Ω", 30))
print(f"–°–µ—Ä–µ–¥–Ω—î: {calculate_average([1.5, 2.7, 3.9, 4.2]):.2f}")
print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {find_user(1)}")
print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {find_user(999)}")
print(f"–î–æ–≤–∂–∏–Ω–∞: {process_data([1, 2, 3, 4, 5])}")

# %% [markdown]
# # üìö –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∞ Best Practices
# 
# ## Input/Output
# 
# ### ‚úÖ –†–æ–±—ñ—Ç—å —Ç–∞–∫:
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ f-strings –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
# - –ß–∏—Ç–∞–π—Ç–µ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—ñ–≤ –∑–∞–º—ñ—Å—Ç—å `input()` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (pandas, json) –∑–∞–º—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å
# - –û–±—Ä–æ–±–ª—è–π—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∏–ø—ñ–≤
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä `with` –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏
# 
# ### ‚ùå –ù–µ —Ä–æ–±—ñ—Ç—å —Ç–∞–∫:
# - –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—é —Ä—è–¥–∫—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
# - –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø—Ä–æ encoding='utf-8' –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
# - –ù–µ –≤–≤–æ–¥—å—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –≤—Ä—É—á–Ω—É (œÄ = 3.14), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `math.pi`
# - –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `with`)
# 
# ## Functions
# 
# ### ‚úÖ –†–æ–±—ñ—Ç—å —Ç–∞–∫:
# - –ü–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –æ–¥–Ω—ñ—î—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—é
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ docstrings –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ type hints –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–±—É–¥–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–º—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π
# - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
# 
# ### ‚ùå –ù–µ —Ä–æ–±—ñ—Ç—å —Ç–∞–∫:
# - –ù–µ —Å—Ç–≤–æ—Ä—é–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—ó-–º–æ–Ω—Å—Ç—Ä–∏ –∑ —Å–æ—Ç–Ω—è–º–∏ —Ä—è–¥–∫—ñ–≤
# - –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –±–µ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
# - –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º—É—Ç–∞–±–µ–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (list, dict)
# - –ù–µ –ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
# 
# ---

# %% [markdown]
# # üéØ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
# 
# ## –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –ª–æ–≥—ñ–≤
# –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —á–∏—Ç–∞—î –ª–æ–≥-—Ñ–∞–π–ª —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (INFO, WARNING, ERROR).
# 
# ## –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç
# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î CSV –∑ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º–∏ (—ñ–º'—è, –≥–æ–¥–∏–Ω–∏, —Å—Ç–∞–≤–∫–∞) —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞—Ä–ø–ª–∞—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–¥–∞—Ç–∫—ñ–≤.
# 
# ## –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É
# –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–∞–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ä—ñ–∑–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–æ–≤–∂–∏–Ω–∞, –≤–∞–≥–∞, —Ç–æ—â–æ).
# 
# ## –ó–∞–≤–¥–∞–Ω–Ω—è 4: –û–±—Ä–æ–±–Ω–∏–∫ JSON –∫–æ–Ω—Ñ—ñ–≥—ñ–≤
# –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
# 
# ## –ó–∞–≤–¥–∞–Ω–Ω—è 5: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤
# –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±–µ—Ä–µ –¥–∞–Ω—ñ –∑ CSV —Ç–∞ –≥–µ–Ω–µ—Ä—É—î HTML –∑–≤—ñ—Ç –∑ —Ç–∞–±–ª–∏—Ü–µ—é —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–æ–º.

# %% [markdown]
# # üîó –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
# 
# ## –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:
# - [Python Documentation](https://docs.python.org/3/)
# - [Python Tutorial](https://docs.python.org/3/tutorial/)
# - [PEP 8 - Style Guide](https://pep8.org/)
# 
# ## –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:
# - [pandas Documentation](https://pandas.pydata.org/docs/)
# - [numpy Documentation](https://numpy.org/doc/)
# - [matplotlib Documentation](https://matplotlib.org/stable/contents.html)
# 
# ## –ù–∞–≤—á–∞–Ω–Ω—è:
# - [Real Python](https://realpython.com/)
# - [Python.org Tutorial](https://docs.python.org/3/tutorial/)
# - [W3Schools Python](https://www.w3schools.com/python/)
# 
# ---
# 
# ## üéì –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–æ–¥—É–ª—è
# 
# –í–∏ –≤–∏–≤—á–∏–ª–∏:
# - ‚úÖ –û—Å–Ω–æ–≤–∏ input/output –≤ Python
# - ‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ (f-strings)
# - ‚úÖ –†–æ–±–æ—Ç—É –∑ —Ñ–∞–π–ª–∞–º–∏ (TXT, CSV, JSON)
# - ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫ (pandas, numpy, math)
# - ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
# - ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏, return, –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
# - ‚úÖ –õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
# - ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ type hints
# - ‚úÖ Best practices –¥–ª—è Python
# 
# **–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:**
# 1. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
# 2. –ü—Ä–∞—Ü—é–π—Ç–µ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
# 3. –í–∏–≤—á–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
# 4. –ß–∏—Ç–∞–π—Ç–µ —á—É–∂–∏–π –∫–æ–¥ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–≤–æ—ó—Ö –Ω–∞–≤–∏—á–æ–∫
# 
# –£–¥–∞—á—ñ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ! üöÄ

# %%
print("\n" + "=" * 80)
print("‚ú® –ú–û–î–£–õ–¨ –ó–ê–í–ï–†–®–ï–ù–û! ‚ú®")
print("=" * 80)
print("\n–î—è–∫—É—î–º–æ –∑–∞ —É–≤–∞–≥—É! –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Ç–∞ –ø–∏—à—ñ—Ç—å —á–∏—Å—Ç–∏–π –∫–æ–¥! üêç")
