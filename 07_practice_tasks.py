"""
Модуль 2.5: Практичні завдання
===============================

Завдання для закріплення знань з модуля 2
"""

# ============================================================================
# БЛОК 1: РОБОТА З ФУНКЦІЯМИ ТА РЯДКАМИ
# ============================================================================

print("=" * 60)
print("БЛОК 1: ФУНКЦІЇ ТА РЯДКИ")
print("=" * 60)

# ----------------------------------------------------------------------------
# Завдання 1: Пошук літери у тексті (FOR LOOP)
# ----------------------------------------------------------------------------

def find_letter_loop(text, letter):
    """
    Знаходить всі позиції літери у тексті використовуючи цикл for
    
    Args:
        text (str): Текст для пошуку
        letter (str): Літера для пошуку
    
    Returns:
        list: Список індексів де знайдено літеру
    
    Приклад:
        >>> find_letter_loop("Hello", "l")
        [2, 3]
    """
    positions = []
    
    # TODO: Напишіть цикл for, який проходить по кожному символу
    # Використайте enumerate() або range(len(text))
    # Якщо символ співпадає з літерою (незалежно від регістру) - додайте індекс до positions
    
    for i in range(len(text)):
        if text[i].lower() == letter.lower():
            positions.append(i)
    
    return positions


# Тестування
print("\n--- Завдання 1: Пошук літери (for loop) ---")
test_text = "Programming in Python"
test_letter = "p"
result = find_letter_loop(test_text, test_letter)
print(f"Текст: '{test_text}'")
print(f"Шукаємо: '{test_letter}'")
print(f"Знайдено на позиціях: {result}")
print(f"Очікується: [0, 14] (P на початку та p в Python)")


# ----------------------------------------------------------------------------
# Завдання 2: Пошук літери через методи рядків
# ----------------------------------------------------------------------------

def find_letter_methods(text, letter):
    """
    Знаходить всі позиції літери використовуючи методи рядків
    
    Args:
        text (str): Текст для пошуку
        letter (str): Літера для пошуку
    
    Returns:
        list: Список індексів
    
    Підказка: Використайте метод .find() у циклі while
    """
    positions = []
    
    # TODO: Використайте метод find() для пошуку
    # find(letter, start) шукає з позиції start
    # Використайте цикл while, поки find() не поверне -1
    
    text_lower = text.lower()
    letter_lower = letter.lower()
    start = 0
    
    while True:
        pos = text_lower.find(letter_lower, start)
        if pos == -1:  # Більше не знайдено
            break
        positions.append(pos)
        start = pos + 1  # Шукаємо далі
    
    return positions


# Тестування
print("\n--- Завдання 2: Пошук літери (методи) ---")
result = find_letter_methods(test_text, test_letter)
print(f"Результат: {result}")


# ----------------------------------------------------------------------------
# Завдання 3: Перетворення до великої літери
# ----------------------------------------------------------------------------

def to_uppercase(text):
    """
    Перетворює перший символ рядка на велику літеру
    
    Args:
        text (str): Вхідний текст
    
    Returns:
        str: Текст з великої літери
    
    Приклади:
        >>> to_uppercase("hello")
        "Hello"
        >>> to_uppercase("python")
        "Python"
    """
    # TODO: Реалізуйте двома способами:
    
    # Спосіб 1: Вручну
    if len(text) == 0:
        return text
    return text[0].upper() + text[1:]
    
    # Спосіб 2: Через метод (закоментуйте спосіб 1 і розкоментуйте цей)
    # return text.capitalize()


print("\n--- Завдання 3: Велика літера ---")
test_words = ["hello", "python", "coding", "fun"]
for word in test_words:
    print(f"'{word}' -> '{to_uppercase(word)}'")


# ----------------------------------------------------------------------------
# Завдання 4: Всі слова у верхньому регістрі
# ----------------------------------------------------------------------------

def to_uppercase_all(text):
    """
    Перетворює весь текст у верхній регістр
    
    Args:
        text (str): Вхідний текст
    
    Returns:
        str: Текст у верхньому регістрі
    """
    # TODO: Використайте метод .upper()
    return text.upper()


print("\n--- Завдання 4: Весь текст великими літерами ---")
sample = "Hello World from Python"
print(f"'{sample}' -> '{to_uppercase_all(sample)}'")


# ----------------------------------------------------------------------------
# Завдання 5: Весь текст у нижньому регістрі
# ----------------------------------------------------------------------------

def to_lowercase_all(text):
    """
    Перетворює весь текст у нижній регістр
    
    Args:
        text (str): Вхідний текст
    
    Returns:
        str: Текст у нижньому регістрі
    """
    # TODO: Використайте метод .lower()
    return text.lower()


print("\n--- Завдання 5: Весь текст маленькими літерами ---")
sample = "Hello World FROM Python"
print(f"'{sample}' -> '{to_lowercase_all(sample)}'")


# ============================================================================
# БЛОК 2: РОБОТА З ЧИСЛАМИ
# ============================================================================

print("\n" + "=" * 60)
print("БЛОК 2: МАТЕМАТИЧНІ ФУНКЦІЇ")
print("=" * 60)

# ----------------------------------------------------------------------------
# Завдання 6: Площа трикутника
# ----------------------------------------------------------------------------

def triangle_area(base, height):
    """
    Обчислює площу трикутника за формулою: (base * height) / 2
    
    Args:
        base (float): Довжина основи трикутника
        height (float): Висота трикутника
    
    Returns:
        float: Площа трикутника
    
    Приклад:
        >>> triangle_area(10, 5)
        25.0
    """
    # TODO: Реалізуйте формулу площі трикутника
    area = (base * height) / 2
    return area


print("\n--- Завдання 6: Площа трикутника ---")
test_cases = [
    (10, 5),
    (7, 4),
    (15, 8),
    (3.5, 2.5)
]

for base, height in test_cases:
    area = triangle_area(base, height)
    print(f"Основа: {base}, Висота: {height} → Площа: {area}")


# ----------------------------------------------------------------------------
# Завдання 7: Площа та периметр прямокутника
# ----------------------------------------------------------------------------

def rectangle_area_and_perimeter(width, height):
    """
    Обчислює площу та периметр прямокутника
    
    Args:
        width (float): Ширина
        height (float): Висота
    
    Returns:
        tuple: (площа, периметр)
    """
    # TODO: Обчисліть площу (width * height) та периметр (2 * (width + height))
    area = width * height
    perimeter = 2 * (width + height)
    return area, perimeter


print("\n--- Завдання 7: Прямокутник ---")
width, height = 8, 5
area, perimeter = rectangle_area_and_perimeter(width, height)
print(f"Ширина: {width}, Висота: {height}")
print(f"Площа: {area}")
print(f"Периметр: {perimeter}")


# ----------------------------------------------------------------------------
# Завдання 8: Площа кола
# ----------------------------------------------------------------------------

def circle_area(radius):
    """
    Обчислює площу кола за формулою: π * r²
    
    Args:
        radius (float): Радіус кола
    
    Returns:
        float: Площа кола
    """
    # TODO: Використайте π ≈ 3.14159
    # Або import math та використайте math.pi
    import math
    area = math.pi * radius ** 2
    return area


print("\n--- Завдання 8: Площа кола ---")
radii = [1, 5, 10, 7.5]
for r in radii:
    area = circle_area(r)
    print(f"Радіус: {r} → Площа: {area:.2f}")


# ============================================================================
# БЛОК 3: КОМПЛЕКСНІ ЗАВДАННЯ
# ============================================================================

print("\n" + "=" * 60)
print("БЛОК 3: КОМПЛЕКСНІ ЗАВДАННЯ")
print("=" * 60)

# ----------------------------------------------------------------------------
# Завдання 9: Калькулятор ІМТ (Індекс Маси Тіла)
# ----------------------------------------------------------------------------

def calculate_bmi(weight, height):
    """
    Обчислює ІМТ (BMI) та класифікацію
    
    Формула: ІМТ = вага(кг) / (зріст(м))²
    
    Класифікація:
    - < 18.5: Недостатня вага
    - 18.5-24.9: Нормальна вага
    - 25-29.9: Надлишкова вага
    - >= 30: Ожиріння
    
    Args:
        weight (float): Вага в кілограмах
        height (float): Зріст в метрах
    
    Returns:
        tuple: (ІМТ, класифікація)
    """
    # TODO: Обчисліть ІМТ та визначте категорію
    bmi = weight / (height ** 2)
    
    if bmi < 18.5:
        category = "Недостатня вага"
    elif bmi < 25:
        category = "Нормальна вага"
    elif bmi < 30:
        category = "Надлишкова вага"
    else:
        category = "Ожиріння"
    
    return bmi, category


print("\n--- Завдання 9: Калькулятор ІМТ ---")
test_people = [
    (70, 1.75),   # Нормальна вага
    (90, 1.80),   # Надлишкова вага
    (55, 1.70),   # Недостатня вага
]

for weight, height in test_people:
    bmi, category = calculate_bmi(weight, height)
    print(f"Вага: {weight}кг, Зріст: {height}м → ІМТ: {bmi:.2f} ({category})")


# ----------------------------------------------------------------------------
# Завдання 10: Перевірка паліндрому
# ----------------------------------------------------------------------------

def is_palindrome(text):
    """
    Перевіряє чи є рядок паліндромом
    (читається однаково зліва направо і справа наліво)
    
    Args:
        text (str): Рядок для перевірки
    
    Returns:
        bool: True якщо паліндром
    
    Приклади:
        >>> is_palindrome("шалаш")
        True
        >>> is_palindrome("python")
        False
    """
    # TODO: Порівняйте text з text[::-1]
    # Не забудьте привести до нижнього регістру та видалити пробіли
    
    # Очищення: видаляємо пробіли та приводимо до нижнього регістру
    cleaned = text.replace(" ", "").lower()
    
    # Порівнюємо з реверсом
    return cleaned == cleaned[::-1]


print("\n--- Завдання 10: Паліндром ---")
test_palindromes = [
    "шалаш",
    "level",
    "python",
    "А роза упала на лапу Азора",
    "hello"
]

for word in test_palindromes:
    result = is_palindrome(word)
    print(f"'{word}' - {'✅ паліндром' if result else '❌ не паліндром'}")


# ----------------------------------------------------------------------------
# Завдання 11: Підрахунок голосних літер
# ----------------------------------------------------------------------------

def count_vowels(text):
    """
    Рахує кількість голосних літер у тексті
    
    Args:
        text (str): Текст для аналізу
    
    Returns:
        int: Кількість голосних
    """
    # TODO: Визначте голосні та порахуйте їх
    # Для української: "аеєиіїоуюя"
    # Для англійської: "aeiou"
    
    vowels = "aeiouаеєиіїоуюя"
    count = 0
    
    for char in text.lower():
        if char in vowels:
            count += 1
    
    return count


print("\n--- Завдання 11: Підрахунок голосних ---")
test_sentences = [
    "Hello World",
    "Привіт Світ",
    "Python Programming",
    "Я вивчаю програмування"
]

for sentence in test_sentences:
    count = count_vowels(sentence)
    print(f"'{sentence}' → {count} голосних")


# ----------------------------------------------------------------------------
# Завдання 12: Конвертер температур
# ----------------------------------------------------------------------------

def temperature_converter(temp, from_scale, to_scale):
    """
    Конвертує температуру між шкалами Цельсія, Фаренгейта та Кельвіна
    
    Args:
        temp (float): Температура
        from_scale (str): Вихідна шкала ('C', 'F', 'K')
        to_scale (str): Цільова шкала ('C', 'F', 'K')
    
    Returns:
        float: Конвертована температура
    
    Формули:
        C → F: (C × 9/5) + 32
        F → C: (F - 32) × 5/9
        C → K: C + 273.15
        K → C: K - 273.15
    """
    # TODO: Реалізуйте конвертацію
    # Спочатку конвертуйте все в Цельсій, потім в потрібну шкалу
    
    # Конвертуємо в Цельсій
    if from_scale == 'C':
        celsius = temp
    elif from_scale == 'F':
        celsius = (temp - 32) * 5/9
    elif from_scale == 'K':
        celsius = temp - 273.15
    else:
        return None
    
    # Конвертуємо з Цельсія в потрібну шкалу
    if to_scale == 'C':
        return celsius
    elif to_scale == 'F':
        return (celsius * 9/5) + 32
    elif to_scale == 'K':
        return celsius + 273.15
    else:
        return None


print("\n--- Завдання 12: Конвертер температур ---")
conversions = [
    (0, 'C', 'F'),     # 32°F
    (100, 'C', 'F'),   # 212°F
    (32, 'F', 'C'),    # 0°C
    (0, 'C', 'K'),     # 273.15K
]

for temp, from_s, to_s in conversions:
    result = temperature_converter(temp, from_s, to_s)
    print(f"{temp}°{from_s} = {result:.2f}°{to_s}")


# ============================================================================
# ДОДАТКОВІ ЗАВДАННЯ (для самостійної роботи)
# ============================================================================

print("\n" + "=" * 60)
print("ДОДАТКОВІ ЗАВДАННЯ ДЛЯ САМОСТІЙНОЇ РОБОТИ")
print("=" * 60)

additional_tasks = """
1. Напишіть функцію, яка визначає чи число просте

2. Напишіть функцію для обчислення факторіалу

3. Напишіть функцію, яка знаходить найбільший спільний дільник (НСД)

4. Напишіть функцію, яка перевертає слова у реченні
   ("Привіт Світ" → "Світ Привіт")

5. Напишіть функцію, яка рахує кількість слів у тексті

6. Напишіть функцію для валідації email адреси (спрощена)
   (має містити @ та крапку після @)

7. Напишіть функцію, яка генерує числа Фібоначчі до N

8. Напишіть функцію для переведення числа з десяткової 
   системи в двійкову

9. Напишіть функцію, яка видаляє дублікати зі списку

10. Напишіть функцію-калькулятор, яка приймає два числа
    та операцію (+, -, *, /) і повертає результат
"""

print(additional_tasks)


# ============================================================================
# ПІДСУМОК
# ============================================================================

print("\n" + "=" * 60)
print("ПІДСУМОК")
print("=" * 60)

summary = """
✅ Ви попрактикували:
   - Створення функцій з різними параметрами
   - Робота з рядками (методи, індексація, зрізи)
   - Математичні обчислення
   - Умовна логіка (if-elif-else)
   - Цикли (for, while)
   - Повернення значень з функцій
   - Використання debugging для перевірки

💡 Що далі:
   - Виконайте всі додаткові завдання
   - Протестуйте кожну функцію з різними даними
   - Використайте debugger для розуміння логіки
   - Додайте власні тести
   - Експериментуйте!

📝 Здача завдання:
   1. Виконайте всі завдання
   2. Протестуйте код
   3. Закомітьте в Git
   4. Відправте на GitHub
   5. Надішліть посилання викладачу
"""

print(summary)

print("\n✨ Практикуйтесь! Програмування - це навичка! ✨\n")
